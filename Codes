package org.example.service;

import org.example.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.ResponseEntity;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class KycMergeService {

    @Autowired
    private RestTemplate restTemplate;
    
    private static final String FINANCE_API_URL = "https://api.example.com/finance-data";
    private static final String KYC_API_URL = "https://api.example.com/kyc-data";

    public List<MergedEntity> mergeDataFromApis() {
        List<MergedEntity> mergedList = new ArrayList<>();
        
        try {
            // Fetch and validate finance data
            ResponseEntity<File1Root> financeResponse = restTemplate.getForEntity(
                FINANCE_API_URL, File1Root.class);
            
            if (financeResponse.getStatusCode().isError() || financeResponse.getBody() == null) {
                throw new RuntimeException("Failed to fetch finance data");
            }
            
            File1Root file1Root = financeResponse.getBody();
            if (file1Root.getResults() == null || file1Root.getResults().isEmpty()) {
                return mergedList;
            }

            // Fetch and validate KYC data
            ResponseEntity<File2Root> kycResponse = restTemplate.getForEntity(
                KYC_API_URL, File2Root.class);
            
            if (kycResponse.getStatusCode().isError() || kycResponse.getBody() == null) {
                throw new RuntimeException("Failed to fetch KYC data");
            }
            
            File2Root file2Root = kycResponse.getBody();
            if (file2Root.getResults() == null || file2Root.getResults().isEmpty()) {
                return mergedList;
            }

            // Merge data with null checks
            for (File1Result file1Result : file1Root.getResults()) {
                if (file1Result == null || file1Result.getEntity() == null || 
                    file1Result.getEntity().getIdentifiers() == null) {
                    continue;
                }

                for (File2Result file2Result : file2Root.getResults()) {
                    if (file2Result == null || file2Result.getIdentifiers() == null || 
                        file2Result.getIdentifiers().isEmpty()) {
                        continue;
                    }

                    if (matchesById(file1Result, file2Result)) {
                        MergedEntity merged = createMergedEntity(file1Result, file2Result);
                        if (merged != null) {
                            mergedList.add(merged);
                        }
                    }
                }
            }
            
        } catch (Exception e) {
            // Log the error
            System.err.println("Error merging data: " + e.getMessage());
        }
        
        return mergedList;
    }

    private boolean matchesById(File1Result file1Result, File2Result file2Result) {
        return file1Result.getEntity().getIdentifiers().getPtyId()
            .equals(file2Result.getIdentifiers().get(0).getPtyId());
    }

    private MergedEntity createMergedEntity(File1Result file1Result, File2Result file2Result) {
        try {
            MergedEntity merged = new MergedEntity();
            merged.setIdentifiers(file1Result.getEntity().getIdentifiers());
            merged.setBusinessAddress(file1Result.getEntity().getBusinessAddress());
            
            if (file2Result.getKycData() != null) {
                merged.setKyCsites(Optional.ofNullable(file2Result.getKycData().getKyCsites())
                    .orElse(Collections.emptyList()));
                merged.setKyCsegment(file2Result.getKycData().getKyCsegment());
                merged.setRiskIndustry(Optional.ofNullable(file2Result.getKycData().getRiskIndustry())
                    .orElse(Collections.emptyList()));
            }
            
            return merged;
        } catch (Exception e) {
            System.err.println("Error creating merged entity: " + e.getMessage());
            return null;
        }
    }
}
