package com.example.model;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.Data;

@Data
public class GenericEntity {
    private JsonNode data;
    private static final ObjectMapper mapper = new ObjectMapper();

    public <T> T getValue(String path, Class<T> type) {
        String[] segments = path.split("\\.");
        JsonNode current = data;
        
        for (String segment : segments) {
            current = current.path(segment);
            if (current.isMissingNode()) {
                return null;
            }
        }
        
        return mapper.convertValue(current, type);
    }

    public boolean matches(GenericEntity other, String[] identifierPaths) {
        for (String path : identifierPaths) {
            JsonNode thisValue = getNode(path);
            JsonNode otherValue = other.getNode(path);
            
            if (thisValue == null || otherValue == null || !thisValue.equals(otherValue)) {
                return false;
            }
        }
        return true;
    }

    private JsonNode getNode(String path) {
        String[] segments = path.split("\\.");
        JsonNode current = data;
        
        for (String segment : segments) {
            current = current.path(segment);
            if (current.isMissingNode()) {
                return null;
            }
        }
        return current;
    }

    public JsonNode mergeWith(GenericEntity other) {
        ObjectNode merged = mapper.createObjectNode();
        merged.set("finance", data.deepCopy());
        merged.set("kyc", other.getData().deepCopy());
        return merged;
    }
}
