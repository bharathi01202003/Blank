package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

/**
 * 1Ô∏è‚É£  Fetch Bearer token once
 * 2Ô∏è‚É£  Pull FinanceCH results
 * 3Ô∏è‚É£  For each ptyId -> call KYC
 * 4Ô∏è‚É£  If KYC returns data, merge finance + kyc into a MergedEntity
 * 5Ô∏è‚É£  Return List<MergedEntity>
 *
 * Uses Stream API only (no Map collections).
 */
@Service
public class DataService {

    /* -------------------------------------------------------------------- */
    /* ‚¨á  Dependencies & configuration                                      */
    /* -------------------------------------------------------------------- */
    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")           // e.g. https://api-int.staging.echonet/ce-third-parties/v2/entities/kyc
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")       // changing Basic token provided by caller
    private String basicAuth;

    private String token;              // Bearer token

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    /* -------------------------------------------------------------------- */
    /* ‚¨á  Step‚Äë1 :  Fetch OAuth2 token (once per request cycle)              */
    /* -------------------------------------------------------------------- */
    private void fetchAuthToken() {
        try {
            HttpHeaders h = new HttpHeaders();
            h.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            h.set("Authorization", basicAuth);
            h.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            ResponseEntity<String> res = restTemplate.postForEntity(
                    authTokenUrl,
                    new HttpEntity<>("", h),
                    String.class
            );

            if (!res.getStatusCode().is2xxSuccessful())
                throw new RuntimeException("Auth token call failed: " + res.getStatusCode());

            this.token = mapper.readTree(res.getBody()).path("access_token").asText();
            if (token == null || token.isBlank())
                throw new RuntimeException("access_token missing in token response");

            System.out.println("‚úÖ  Token fetched");
        } catch (Exception e) {
            throw new RuntimeException("fetchAuthToken error: " + e.getMessage(), e);
        }
    }

    /* -------------------------------------------------------------------- */
    /* ‚¨á  Public entry ‚Äì returns merged data list                           */
    /* -------------------------------------------------------------------- */
    public List<MergedEntity> getMergedEntities() {
        fetchAuthToken();                              // ‚ë† token

        // ‚ë° fetch Finance data
        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        System.out.println("‚úÖ  Finance results: " + financeResults.size());

        // ‚ë¢ loop over ptyIds with Stream ‚Äì no Map collections
        return StreamSupport.stream(financeResults.spliterator(), false)
                .map(result -> result.path("entity"))
                .filter(entity -> entity.has("identifiers") && entity.path("identifiers").has("ptyId"))
                .map(entity -> mergeForSinglePtyId(entity))
                .filter(merged -> merged != null)      // skip ptyIds without valid KYC
                .collect(Collectors.toList());
    }

    /* -------------------------------------------------------------------- */
    /* ‚¨á  Merge logic for ONE ptyId                                         */
    /* -------------------------------------------------------------------- */
    private MergedEntity mergeForSinglePtyId(JsonNode financeEntity) {

        // finance side
        JsonNode identifiersNode   = financeEntity.path("identifiers");
        String  ptyId              = identifiersNode.path("ptyId").asText();
        BusinessAddress businessAddress = mapper.convertValue(
                financeEntity.path("businessAddress"), BusinessAddress.class);
        Identifiers identifiers = mapper.convertValue(identifiersNode, Identifiers.class);

        System.out.println("üîπ Processing ptyId: " + ptyId);

        // GET KYC for this ptyId
        String kycEndpoint = kycUrl + "?ptyId=" + ptyId;
        JsonNode kycRoot   = fetchJson(kycEndpoint);

        /*  KYC expected structure:
              {
                "results": [
                   { "entity": { "kycSites": [...],
                                 "kycSegment": "...",
                                 "riskIndustry": [...] } }
                ]
              }
         */
        JsonNode kycEntityArr = kycRoot.path("results");
        if (!kycEntityArr.isArray() || kycEntityArr.size() == 0) {
            System.out.println("‚ö†Ô∏è  No KYC data for ptyId " + ptyId);
            return null;
        }
        JsonNode kycEntity = kycEntityArr.get(0).path("entity");

        // extract kyc fields
        List<KycSites> kycSites = mapper.convertValue(
                kycEntity.path("kycSites"),
                new TypeReference<>() {}
        );

        String kycSegment = kycEntity.path("kycSegment").asText(null);

        List<RiskIndustry> riskIndustry = mapper.convertValue(
                kycEntity.path("riskIndustry"),
                new TypeReference<>() {}
        );

        // build merged entity
        MergedEntity merged = new MergedEntity(
                List.of(identifiers),      // identifiers list (finance)
                businessAddress,           // businessAddress (finance)
                kycSites,                  // kycSites (kyc)
                kycSegment,                // kycSegment (kyc)
                riskIndustry               // riskIndustry (kyc)
        );
        System.out.println("‚úÖ  MergedEntity created for ptyId: " + ptyId);
        return merged;
    }

    /* -------------------------------------------------------------------- */
    /* ‚¨á  Small helper: GET + parse JSON with Bearer header                  */
    /* -------------------------------------------------------------------- */
    private JsonNode fetchJson(String url) {
        HttpHeaders h = new HttpHeaders();
        h.setBearerAuth(token);
        h.add("Accept", "*/*;version=gamma");

        ResponseEntity<String> res = restTemplate.exchange(
                url, HttpMethod.GET, new HttpEntity<>(h), String.class);

        if (!res.getStatusCode().is2xxSuccessful())
            throw new RuntimeException("GET " + url + " => " + res.getStatusCode());

        try { return mapper.readTree(res.getBody()); }
        catch (Exception e) {
            throw new RuntimeException("JSON parse error from " + url, e);
        }
    }
}
