package com.example.service;

import com.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class KycMergeService {
    private final List<MergedEntity> mergedEntities = new ArrayList<>();
    private final RestTemplate restTemplate;

    @Value("${finance.api.url}")
    private String financeApiUrl;

    @Value("${kyc.api.url}")
    private String kycApiUrl;

    public KycMergeService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @PostConstruct
    public void init() {
        mergeData();
    }

    private void mergeData() {
        File1Root financeData = restTemplate.getForObject(financeApiUrl, File1Root.class);
        File2Root kycData = restTemplate.getForObject(kycApiUrl, File2Root.class);

        if (financeData != null && kycData != null) {
            mergedEntities.addAll(
                financeData.getResults().stream()
                    .flatMap(financeResult -> kycData.getResults().stream()
                        .filter(kycResult -> matchIdentifiers(financeResult, kycResult))
                        .map(kycResult -> createMergedEntity(financeResult, kycResult))
                    )
                    .collect(Collectors.toList())
            );
        }
    }

    private boolean matchIdentifiers(File1Result financeResult, File2Result kycResult) {
        return financeResult.getEntity().getIdentifiers().getPtyId()
            .equals(kycResult.getIdentifiers().get(0).getPtyId());
    }

    private MergedEntity createMergedEntity(File1Result financeResult, File2Result kycResult) {
        MergedEntity merged = new MergedEntity();
        merged.setIdentifiers(financeResult.getEntity().getIdentifiers());
        merged.setBusinessAddress(financeResult.getEntity().getBusinessAddress());
        merged.setKyCsites(kycResult.getKycData().getKyCsites());
        merged.setKyCsegment(kycResult.getKycData().getKyCsegment());
        merged.setRiskIndustry(kycResult.getKycData().getRiskIndustry());
        return merged;
    }

    public List<MergedEntity> getAllMergedEntities() {
        return new ArrayList<>(mergedEntities);
    }

    public Optional<MergedEntity> getEntityByIdentifier(String ptyId) {
        return mergedEntities.stream()
            .filter(me -> me.getIdentifiers().getPtyId().equals(ptyId))
            .findFirst();
    }

    public List<MergedEntity> getEntitiesByRiskLevel(String riskLevel) {
        return mergedEntities.stream()
            .filter(me -> me.getRiskIndustry().getLevel().equalsIgnoreCase(riskLevel))
            .collect(Collectors.toList());
    }
}
