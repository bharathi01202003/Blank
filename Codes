package com.bnp.service;

import com.bnp.model.*;
import com.bnp.repository.MergedEntityRepository;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private static final Logger logger = LoggerFactory.getLogger(DataService.class);

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;
    private final MergedEntityRepository mergedEntityRepository;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate, MergedEntityRepository mergedEntityRepository) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
        this.mergedEntityRepository = mergedEntityRepository;
    }

    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                logger.error("Auth token API failed: {}", response.getStatusCode());
                token = null;
                return;
            }

            JsonNode json = mapper.readTree(response.getBody());
            token = json.path("access_token").asText(null);

            if (token == null || token.isBlank()) {
                logger.error("Access token missing in auth response");
            }

        } catch (Exception e) {
            logger.error("Error while fetching auth token", e);
            token = null;
        }
    }

    public List<MergedEntity> getMergedEntities() {
        fetchAuthToken();
        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        logger.info("Finance results count: {}", financeResults.size());

        return StreamSupport.stream(financeResults.spliterator(), false)
                .map(result -> result.path("entity"))
                .filter(entity -> entity.has("identifiers") && entity.path("identifiers").has("ptyId"))
                .map(this::mergeForSinglePtyId)
                .collect(Collectors.toList());
    }

    private MergedEntity mergeForSinglePtyId(JsonNode financeEntity) {
        Identifiers identifiers = mapper.convertValue(financeEntity.path("identifiers"), Identifiers.class);
        BusinessAddress businessAddress = mapper.convertValue(financeEntity.path("businessAddress"), BusinessAddress.class);
        RegistrationAddress registrationAddress = financeEntity.has("registrationAddress")
                ? mapper.convertValue(financeEntity.path("registrationAddress"), RegistrationAddress.class)
                : null;

        String ptyId = identifiers.getPtyId() != null ? identifiers.getPtyId().toString() : null;

        List<KycSites> kycSites = null;
        String kycSegment = null;
        List<RiskIndustry> riskIndustry = null;

        if (ptyId != null && token != null) {
            JsonNode kycRoot = fetchJson(kycUrl + "?ptyId=" + ptyId);
            JsonNode kycData = kycRoot.path("results").isArray() && kycRoot.path("results").size() > 0
                    ? kycRoot.path("results").get(0).path("kycData")
                    : mapper.createObjectNode();

            if (!kycData.isMissingNode()) {
                if (kycData.path("kycSites").isArray()) {
                    kycSites = mapper.convertValue(kycData.path("kycSites"), new TypeReference<>() {});
                }
                kycSegment = kycData.has("kycSegment") ? kycData.path("kycSegment").asText(null) : null;
                if (kycData.path("riskIndustry").isArray()) {
                    riskIndustry = mapper.convertValue(kycData.path("riskIndustry"), new TypeReference<>() {});
                }
            } else {
                logger.info("No KYC data for ptyId: {}", ptyId);
            }
        }

        return new MergedEntity(
                List.of(identifiers),
                businessAddress,
                registrationAddress,
                kycSites,
                kycSegment,
                riskIndustry
        );
    }

    private JsonNode fetchJson(String url) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.add("Accept", "*/*;version=gamma");
            if (token != null && !token.isBlank()) {
                headers.setBearerAuth(token);
            }

            HttpEntity<String> request = new HttpEntity<>(headers);
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                logger.error("GET {} failed with status {}", url, response.getStatusCode());
                return mapper.createObjectNode();
            }

            return mapper.readTree(response.getBody());
        } catch (Exception e) {
            logger.error("Exception while calling {}", url, e);
            return mapper.createObjectNode();
        }
    }

    @Transactional
    public void exportMergedEntitiesToDatabase() {
        List<MergedEntity> entities = getMergedEntities();
        
        // Clear existing data
        mergedEntityRepository.deleteAll();
        
        entities.forEach(entity -> {
            MergedEntityRecord record = new MergedEntityRecord();
            Identifiers id = entity.getIdentifiers().get(0);
            RegistrationAddress reg = entity.getRegistrationAddress();

            record.setCrdsCode(safe(id.getCrdsCode()));
            
            if (reg != null) {
                record.setRegistrationAddress(
                    safe(reg.getLine1()) + " " + 
                    safe(reg.getLine2()) + " " + 
                    safe(reg.getCity()) + " " + 
                    safe(reg.getState()) + " " + 
                    safe(reg.getZipCode())
                );
                record.setCountry(safe(reg.getCountry()));
            }

            KycSites site = entity.getKycSites() != null && !entity.getKycSites().isEmpty() 
                ? entity.getKycSites().get(0) 
                : null;

            if (site != null) {
                record.setSiteName(safe(site.getSiteName()));
                record.setSiteCountry(safe(site.getSiteCountry()));
                record.setSiteStatus(safe(site.getSiteStatus()));
            }

            record.setKycSegment(safe(entity.getKycSegment()));

            if (entity.getRiskIndustry() != null) {
                record.setRiskIndustryCodes(
                    entity.getRiskIndustry().stream()
                        .map(ri -> safe(ri.getRiskIndustryCode()) + "-" + safe(ri.getRiskIndustryDescription()))
                        .collect(Collectors.joining(","))
                );
            }

            mergedEntityRepository.save(record);
        });

        logger.info("Saved {} entities to database", entities.size());
    }

    private String safe(String value) {
        return value == null ? "" : value.trim().replaceAll(";", " ");
    }
}




# H2 Database Configuration
spring.datasource.url=jdbc:h2:mem:bnpdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA/Hibernate properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true



package com.bnp.repository;

import com.bnp.model.MergedEntityRecord;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MergedEntityRepository extends JpaRepository<MergedEntityRecord, Long> {
}




package com.bnp.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "merged_entities")
@Getter
@Setter
public class MergedEntityRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "crds_code")
    private String crdsCode;
    
    @Column(name = "registration_address", length = 1000)
    private String registrationAddress;
    
    @Column(name = "country")
    private String country;
    
    @Column(name = "site_name")
    private String siteName;
    
    @Column(name = "site_country")
    private String siteCountry;
    
    @Column(name = "site_status")
    private String siteStatus;
    
    @Column(name = "kyc_segment")
    private String kycSegment;
    
    @Column(name = "risk_industry_codes", length = 1000)
    private String riskIndustryCodes;
}

