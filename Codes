package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("Auth token API returned error: " + response.getStatusCode());
            }

            JsonNode json = mapper.readTree(response.getBody());
            this.token = json.path("access_token").asText();

            if (token == null || token.isBlank()) {
                throw new RuntimeException("Token not found in auth response");
            }

            System.out.println("‚úÖ Auth token fetched.");
        } catch (Exception e) {
            throw new RuntimeException("Failed to fetch token: " + e.getMessage(), e);
        }
    }

    public List<MergedEntity> getMergedEntities() {
        fetchAuthToken();

        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        System.out.println("‚úÖ Total Finance results: " + financeResults.size());

        List<String> ptyIds = StreamSupport.stream(financeResults.spliterator(), false)
                .map(r -> r.path("entity").path("identifiers").path("ptyId").asText())
                .filter(id -> id != null && !id.isBlank())
                .collect(Collectors.toList());

        return ptyIds.stream()
                .flatMap(ptyId -> mergeForPtyId(financeResults, ptyId))
                .collect(Collectors.toList());
    }

    private Stream<MergedEntity> mergeForPtyId(JsonNode financeResults, String ptyId) {
        System.out.println("üîπ Checking ptyId: " + ptyId);

        JsonNode financeMatch = StreamSupport.stream(financeResults.spliterator(), false)
                .filter(r -> ptyId.equals(r.path("entity").path("identifiers").path("ptyId").asText()))
                .findFirst()
                .orElse(null);

        if (financeMatch == null) {
            System.out.println("‚ùå No finance match for ptyId: " + ptyId);
            return Stream.empty();
        }

        BusinessAddress businessAddress = mapper.convertValue(
                financeMatch.path("entity").path("businessAddress"), BusinessAddress.class);

        Identifiers identifiers = mapper.convertValue(
                financeMatch.path("entity").path("identifiers"), Identifiers.class);

        String kycEndpoint = kycUrl + "?ptyId=" + ptyId;
        JsonNode kycRoot = fetchJson(kycEndpoint);
        System.out.println("‚û° KYC URL: " + kycEndpoint);
        System.out.println("‚¨Ö KYC Raw Response: " + kycRoot.toPrettyString());

        JsonNode kycEntity = kycRoot.path("entity");
        if (kycEntity.isMissingNode() || kycEntity.isEmpty()) {
            System.out.println("‚ö†Ô∏è No KYC data for ptyId: " + ptyId);
            return Stream.empty();
        }

        List<KycSites> kycSites = mapper.convertValue(
                kycEntity.path("kycSites"),
                new TypeReference<>() {}
        );

        String kycSegment = kycEntity.path("kycSegment").asText(null);

        List<RiskIndustry> riskIndustry = mapper.convertValue(
                kycEntity.path("riskIndustry"),
                new TypeReference<>() {}
        );

        MergedEntity merged = new MergedEntity(
                List.of(identifiers),
                businessAddress,
                kycSites,
                kycSegment,
                riskIndustry
        );

        System.out.println("‚úÖ MergedEntity created for ptyId: " + ptyId);
        return Stream.of(merged);
    }

    private JsonNode fetchJson(String url) {
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(this.token);
        headers.add("Accept", "*/*;version=gamma");

        HttpEntity<String> request = new HttpEntity<>(headers);
        ResponseEntity<String> response = restTemplate.exchange(
                url, HttpMethod.GET, request, String.class);

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("GET " + url + " failed: " + response.getStatusCode());
        }

        try {
            return mapper.readTree(response.getBody());
        } catch (Exception e) {
            throw new RuntimeException("JSON parse error: " + e.getMessage(), e);
        }
    }
}
