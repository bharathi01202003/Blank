package org.example.service;

import org.example.dto.MergedResult;
import org.example.model.finance.Entity;
import org.example.model.finance.FinanceResult;
import org.example.model.kyc.Identifier;
import org.example.model.kyc.KycData;
import org.example.model.kyc.KycResult;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class MergerService {

    @Autowired
    private RestTemplate restTemplate;

    public List<MergedResult> getMergedData() {
        FinanceResult financeResult = restTemplate.getForObject("http://localhost:8081/finance", FinanceResult.class);
        KycResult kycResult = restTemplate.getForObject("http://localhost:8082/kyc", KycResult.class);

        List<Entity> financeEntities = financeResult.getResults();    // Each has a single Identifier
        List<KycData> kycDataList = kycResult.getResults();           // Each has List<Identifier>

        return kycDataList.stream()
                .flatMap(kycData -> kycData.getIdentifiers().stream()   // Iterate over KYC identifiers
                        .flatMap(kycId -> financeEntities.stream()
                                .filter(finEntity -> finEntity.getIdentifier() != null &&
                                        kycId.getKycid() != null &&
                                        kycId.getKycid().equals(finEntity.getIdentifier().getKycid()))
                                .map(finEntity -> new MergedResult(
                                        kycId.getKycid(),
                                        finEntity,
                                        kycData
                                ))
                        )
                ).collect(Collectors.toList());
    }
}
