package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("Auth token API returned error: " + response.getStatusCode());
            }

            JsonNode json = mapper.readTree(response.getBody());
            this.token = json.path("access_token").asText();

            if (token == null || token.isBlank()) {
                throw new RuntimeException("Token not found in auth response");
            }

            System.out.println("‚úÖ Token fetched: " + token);

        } catch (Exception e) {
            throw new RuntimeException("Failed to fetch token: " + e.getMessage(), e);
        }
    }

    public List<MergedEntity> getMergedEntities() {
        fetchAuthToken();

        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        System.out.println("‚úÖ Finance results count: " + financeResults.size());

        return StreamSupport.stream(financeResults.spliterator(), false)
                .map(resultNode -> resultNode.path("entity"))
                .filter(entityNode -> entityNode.has("identifiers") && entityNode.path("identifiers").has("ptyId"))
                .map(this::mergeForSinglePtyId)
                .filter(merged -> merged != null)
                .collect(Collectors.toList());
    }

    private MergedEntity mergeForSinglePtyId(JsonNode financeEntity) {
        try {
            JsonNode identifiersNode = financeEntity.path("identifiers");
            String ptyId = identifiersNode.path("ptyId").asText();

            System.out.println("üîç Processing ptyId: " + ptyId);

            BusinessAddress businessAddress = mapper.convertValue(financeEntity.path("businessAddress"), BusinessAddress.class);
            Identifiers identifiers = mapper.convertValue(identifiersNode, Identifiers.class);

            String kycEndpoint = kycUrl + "?ptyId=" + ptyId;
            JsonNode kycRoot = fetchJson(kycEndpoint);

            JsonNode results = kycRoot.path("results");
            if (!results.isArray() || results.size() == 0) {
                System.out.println("‚ö†Ô∏è No KYC results for ptyId: " + ptyId);
                return null;
            }

            JsonNode kycData = results.get(0).path("kycData");

            // kycSites
            JsonNode kycSitesNode = kycData.path("kycSites");
            List<KycSites> kycSites = kycSitesNode.isArray()
                    ? mapper.convertValue(kycSitesNode, new TypeReference<>() {})
                    : Collections.emptyList();
            System.out.println("‚úÖ kycSites count for ptyId " + ptyId + ": " + kycSites.size());

            // kycSegment
            String kycSegment = kycData.path("kycSegment").asText(null);

            // riskIndustry
            JsonNode riskIndustryNode = kycData.path("riskIndustry");
            List<RiskIndustry> riskIndustry = riskIndustryNode.isArray()
                    ? mapper.convertValue(riskIndustryNode, new TypeReference<>() {})
                    : Collections.emptyList();

            return new MergedEntity(
                    List.of(identifiers),
                    businessAddress,
                    kycSites,
                    kycSegment,
                    riskIndustry
            );

        } catch (Exception e) {
            System.err.println("‚ùå Error merging ptyId: " + financeEntity.path("identifiers").path("ptyId").asText());
            e.printStackTrace();
            return null;
        }
    }

    private JsonNode fetchJson(String url) {
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);
        headers.add("Accept", "*/*;version=gamma");

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(headers), String.class);

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("GET " + url + " failed: " + response.getStatusCode());
        }

        try {
            return mapper.readTree(response.getBody());
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON from: " + url, e);
        }
    }
}
