package org.example.config;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.*;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.Collections;

@Configuration
public class ApiConfig {

    @Value("${api.token}")
    private String authToken;

    @Value("${api.finance.url}")
    private String financeApiUrl;

    @Value("${api.kyc.url}")
    private String kycApiUrl;

    public String getAuthToken() {
        return authToken;
    }

    public String getFinanceApiUrl() {
        return financeApiUrl;
    }

    public String getKycApiUrl() {
        return kycApiUrl;
    }

    @Bean
    public RestTemplate restTemplate() {
        disableSslValidation();
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.setInterceptors(Collections.singletonList((request, body, execution) -> {
            request.getHeaders().add("Authorization", "Bearer " + authToken);
            return execution.execute(request, body);
        }));
        return restTemplate;
    }

    @PostConstruct
    public void disableSslValidation() {
        try {
            TrustManager[] trustAllCerts = new TrustManager[]{
                new X509TrustManager() {
                    public void checkClientTrusted(X509Certificate[] certs, String authType) {}
                    public void checkServerTrusted(X509Certificate[] certs, String authType) {}
                    public X509Certificate[] getAcceptedIssuers() {
                        return new X509Certificate[0];
                    }
                }
            };

            SSLContext sc = SSLContext.getInstance("TLS");
            sc.init(null, trustAllCerts, new SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);
        } catch (Exception e) {
            System.err.println("Could not disable SSL: " + e.getMessage());
        }
    }
}
