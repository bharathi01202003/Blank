package org.example.service;

import org.example.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import javax.annotation.PostConstruct;
import javax.net.ssl.*;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.*;

@Service
public class KycMergeService {

    @Autowired
    private RestTemplate restTemplate;

    @Value("${api.access.token}")
    private String authToken;  // Injected from properties

    @Value("${api.finance.url}")
    private String financeApiUrl;  // From properties

    @Value("${api.kyc.url}")
    private String kycApiUrl;  // From properties

    @PostConstruct
    public void disableSslValidation() {
        try {
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, getTrustAllCerts(), new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);
        } catch (Exception e) {
            System.err.println("SSL disabling failed: " + e.getMessage());
        }
    }

    private TrustManager[] getTrustAllCerts() {
        return new TrustManager[]{
            new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() { return null; }
                public void checkClientTrusted(X509Certificate[] certs, String authType) {}
                public void checkServerTrusted(X509Certificate[] certs, String authType) {}
            }
        };
    }

    public List<MergedEntity> fetchAndMergeData() {
        try {
            File1Root financeData = fetchFromApi(financeApiUrl, File1Root.class);
            File2Root kycData = fetchFromApi(kycApiUrl, File2Root.class);
            
            return mergeData(financeData, kycData);
        } catch (Exception e) {
            System.err.println("Failed to merge data: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    private <T> T fetchFromApi(String url, Class<T> responseType) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", authToken);
        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<T> response = restTemplate.exchange(
            url, HttpMethod.GET, entity, responseType);
        
        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("API request failed: " + response.getStatusCode());
        }
        return response.getBody();
    }

    private List<MergedEntity> mergeData(File1Root financeData, File2Root kycData) {
        if (financeData == null || kycData == null) {
            return Collections.emptyList();
        }

        List<MergedEntity> mergedList = new ArrayList<>();
        
        financeData.getResults().forEach(finance -> {
            if (isValidFinanceRecord(finance)) {
                findMatchingKycRecord(kycData, finance)
                    .ifPresent(kyc -> mergedList.add(createMergedEntity(finance, kyc)));
            }
        });

        return mergedList;
    }

    private boolean isValidFinanceRecord(File1Result finance) {
        return finance != null && 
               finance.getEntity() != null && 
               finance.getEntity().getIdentifiers() != null;
    }

    private Optional<File2Result> findMatchingKycRecord(File2Root kycData, File1Result finance) {
        return kycData.getResults().stream()
            .filter(this::isValidKycRecord)
            .filter(kyc -> finance.getEntity().getIdentifiers().getPtyId()
                .equals(kyc.getIdentifiers().get(0).getPtyId()))
            .findFirst();
    }

    private boolean isValidKycRecord(File2Result kyc) {
        return kyc != null && 
               kyc.getIdentifiers() != null && 
               !kyc.getIdentifiers().isEmpty();
    }

    private MergedEntity createMergedEntity(File1Result finance, File2Result kyc) {
        MergedEntity merged = new MergedEntity();
        merged.setIdentifiers(finance.getEntity().getIdentifiers());
        merged.setBusinessAddress(finance.getEntity().getBusinessAddress());
        
        if (kyc.getKycData() != null) {
            merged.setKyCsites(kyc.getKycData().getKyCsites());
            merged.setKyCsegment(kyc.getKycData().getKyCsegment());
            merged.setRiskIndustry(kyc.getKycData().getRiskIndustry());
        }
        
        return merged;
    }
}
