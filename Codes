package org.example.service;

import org.example.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.*;

@Service
public class DataService {

    @Autowired
    private WebClient webClient;

    @Value("${api.finance.url}")
    private String financeUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    public List<MergedEntity> fetchAndMergeData() {
        try {
            FinanceResponse financeResponse = fetch(financeUrl, FinanceResponse.class);
            KycResponse kycResponse = fetch(kycUrl, KycResponse.class);

            return mergeData(financeResponse, kycResponse);
        } catch (Exception e) {
            System.err.println("Failed to fetch or merge: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    private <T> T fetch(String url, Class<T> clazz) {
        return webClient.get()
            .uri(url)
            .retrieve()
            .onStatus(status -> status.isError(), response -> {
                System.err.println("‚ùå API error: " + response.statusCode());
                return Mono.error(new RuntimeException("API call failed with status: " + response.statusCode()));
            })
            .bodyToMono(clazz)
            .block();
    }

    private List<MergedEntity> mergeData(FinanceResponse finance, KycResponse kyc) {
        if (finance == null || kyc == null) return Collections.emptyList();

        List<MergedEntity> merged = new ArrayList<>();

        for (FinanceResults financeResult : finance.getResults()) {
            if (financeResult.getEntity() == null || financeResult.getEntity().getIdentifiers() == null) continue;

            Identifier financeId = financeResult.getEntity().getIdentifiers(); // SINGLE IDENTIFIER

            Optional<ResultObject> match = kyc.getResults().stream()
                .filter(kycResult -> kycResult.getIdentifiers() != null && !kycResult.getIdentifiers().isEmpty())
                .filter(kycResult -> financeId.getPtyId().equals(kycResult.getIdentifiers().get(0).getPtyId()))
                .findFirst();

            match.ifPresent(kycResult -> {
                MergedEntity me = new MergedEntity();
                me.setIdentifiers(Collections.singletonList(financeId));
                me.setBusinessAddress(financeResult.getEntity().getBusinessAddress());

                if (kycResult.getKycData() != null) {
                    me.setKycSites(kycResult.getKycData().getKycSites());
                    me.setKycSegment(kycResult.getKycData().getKycSegment());
                    me.setRiskIndustry(kycResult.getKycData().getRiskIndustry());
                }

                merged.add(me);
            });
        }

        return merged;
    }
}
