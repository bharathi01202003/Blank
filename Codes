package org.example.service;

import org.example.config.ApiConfig;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class KycMergeService {

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private ApiConfig apiConfig;

    public List<MergedEntity> fetchAndMergeData() {
        try {
            File1Root financeData = fetchFromApi(apiConfig.getFinanceApiUrl(), File1Root.class);
            if (financeData == null || financeData.getResults() == null) return Collections.emptyList();

            List<MergedEntity> mergedList = new ArrayList<>();

            for (File1Result finance : financeData.getResults()) {
                if (!isValidFinanceRecord(finance)) continue;

                String ptyId = finance.getEntity().getIdentifiers().getPtyId();
                String kycUrl = apiConfig.getKycApiUrl() + "?ptyId=" + ptyId;
                System.out.println("DEBUG: Fetching KYC from URL: " + kycUrl);

                File2Root kycData = fetchFromApi(kycUrl, File2Root.class);

                if (kycData == null || kycData.getResults() == null) continue;

                Optional<File2Result> matchingKyc = kycData.getResults().stream()
                    .filter(this::isValidKycRecord)
                    .filter(k -> k.getIdentifiers().get(0).getPtyId().equals(ptyId))
                    .findFirst();

                matchingKyc.ifPresent(kyc -> mergedList.add(createMergedEntity(finance, kyc)));
            }

            return mergedList;

        } catch (Exception e) {
            System.err.println("Failed to merge data: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    private <T> T fetchFromApi(String url, Class<T> responseType) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + apiConfig.getAuthToken());
        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<T> response = restTemplate.exchange(url, HttpMethod.GET, entity, responseType);

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("API request failed: " + response.getStatusCode());
        }
        return response.getBody();
    }

    private boolean isValidFinanceRecord(File1Result finance) {
        return finance != null && finance.getEntity() != null && finance.getEntity().getIdentifiers() != null;
    }

    private boolean isValidKycRecord(File2Result kyc) {
        return kyc != null && kyc.getIdentifiers() != null && !kyc.getIdentifiers().isEmpty();
    }

    private MergedEntity createMergedEntity(File1Result finance, File2Result kyc) {
        MergedEntity merged = new MergedEntity();
        merged.setIdentifiers(Collections.singletonList(finance.getEntity().getIdentifiers()));
        merged.setBusinessAddress(finance.getEntity().getBusinessAddress());
        if (kyc.getKycData() != null) {
            merged.setKycSites(kyc.getKycData().getKycSites());
            merged.setKycSegment(kyc.getKycData().getKycSegment());
            merged.setRiskIndustry(kyc.getKycData().getRiskIndustry());
        }
        return merged;
    }
}
