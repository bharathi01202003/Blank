package org.example.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import java.util.Map;

@Service
public class AuthService {

    private static final Logger logger = LoggerFactory.getLogger(AuthService.class);
    private final WebClient webClient;

    @Value("${api.auth.url}")
    private String authUrl;

    @Value("${api.auth.basic}")
    private String basicToken; // Base64 encoded

    public AuthService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.build();
    }

    public String fetchToken() {
        try {
            logger.info("üîê Requesting auth token from: {}", authUrl);

            Map<String, Object> response = webClient.post()
                    .uri(authUrl)
                    .header("Authorization", "Basic " + basicToken)
                    .header("Accept", "*/*;version=gamma")
                    .contentType(MediaType.APPLICATION_FORM_URLENCODED)
                    .bodyValue("grant_type=client_credentials")
                    .retrieve()
                    .bodyToMono(Map.class)
                    .block();

            String token = response != null ? (String) response.get("access_token") : null;

            if (token == null) {
                logger.error("‚ùå Auth token not found in response: {}", response);
            } else {
                logger.info("‚úÖ Auth token fetched successfully");
            }

            return token;

        } catch (WebClientResponseException e) {
            logger.error("‚ùå Auth token fetch failed: {} - {}", e.getStatusCode(), e.getResponseBodyAsString());
        } catch (Exception e) {
            logger.error("‚ùå Auth token fetch failed: {}", e.getMessage());
        }

        return null;
    }
}
