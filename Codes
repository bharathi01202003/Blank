package org.example.service;

import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
public class EntityMergeService {

    @Value("${api.auth.url}")
    private String authUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${api.finance.url}")
    private String financeUrl;

    @Value("${api.client.credentials}")
    private String clientCredentials;

    private final RestTemplate restTemplate;

    public EntityMergeService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public String getAccessToken() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "*/*;version=gamma");
        headers.set("Authorization", "Basic " + clientCredentials);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(
                authUrl,
                HttpMethod.POST,
                entity,
                String.class);

        return parseAccessToken(response.getBody());
    }

    private String parseAccessToken(String responseBody) {
        // Implement proper JSON parsing
        if (responseBody.contains("access_token")) {
            return responseBody.split("\"access_token\":\"")[1].split("\"")[0];
        }
        throw new RuntimeException("Failed to parse access token");
    }

    public File2Root getAllKycData(String accessToken) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "*/*;version=gamma");
        headers.set("Authorization", "Bearer " + accessToken);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        return restTemplate.exchange(
                kycUrl,
                HttpMethod.GET,
                entity,
                File2Root.class).getBody();
    }

    public File1Root getFinanceDataByKycId(String kycId, String accessToken) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "*/*;version=gamma");
        headers.set("Authorization", "Bearer " + accessToken);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        String url = String.format("%s?kycId=%s", financeUrl, kycId);

        return restTemplate.exchange(
                url,
                HttpMethod.GET,
                entity,
                File1Root.class).getBody();
    }

    public List<MergedEntity> mergeAllEntities() {
        String accessToken = getAccessToken();

        // Get all KYC data first
        File2Root kycRoot = getAllKycData(accessToken);

        return kycRoot.getResults().stream()
                .map(kycResult -> {
                    // Extract kycId from KYC data
                    Integer kycId = kycResult.getIdentifiers().stream()
                            .map(Identifiers::getKycId)
                            .filter(Objects::nonNull)
                            .findFirst()
                            .orElse(null);

                    if (kycId != null) {
                        // Get finance data using the kycId
                        File1Root financeRoot = getFinanceDataByKycId(kycId.toString(), accessToken);
                        
                        // Check if finance data exists for this kycId
                        if (financeRoot != null && !financeRoot.getResults().isEmpty()) {
                            return createMergedEntity(
                                    financeRoot.getResults().get(0).getEntity(),
                                    kycResult
                            );
                        }
                    }
                    return null;
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
    }

    private MergedEntity createMergedEntity(Entity financeEntity, File2Result kycResult) {
        MergedEntity mergedEntity = new MergedEntity();
        
        // Set identifiers from KYC
        mergedEntity.setIdentifiers(kycResult.getIdentifiers());
        
        // Set address from Finance
        mergedEntity.setBusinessAddress(financeEntity.getBusinessAddress());
        
        // Set KYC specific data
        if (kycResult.getKycData() != null) {
            mergedEntity.setKycSites(kycResult.getKycData().getKycSites());
            mergedEntity.setKycSegment(kycResult.getKycData().getKycSegment());
            mergedEntity.setRiskIndustry(kycResult.getKycData().getRiskIndustry());
        }
        
        return mergedEntity;
    }
}




package org.example.controller;

import org.example.model.MergedEntity;
import org.example.service.EntityMergeService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/entities")
public class EntityController {

    private final EntityMergeService entityMergeService;

    public EntityController(EntityMergeService entityMergeService) {
        this.entityMergeService = entityMergeService;
    }

    @GetMapping("/merged")
    public List<MergedEntity> getAllMergedEntities() {
        return entityMergeService.mergeAllEntities();
    }
}
