package com.example.service;

import com.example.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class KycMergeService {

    private static final Logger logger = LoggerFactory.getLogger(KycMergeService.class);
    
    @Value("${api.finance.url}")
    private String financeApiUrl;
    
    @Value("${api.kyc.url}")
    private String kycApiUrl;

    private final RestTemplate restTemplate;
    
    // Store merged entities in a map using `ptyId` as the key
    private final Map<String, MergedEntity> mergedEntitiesMap = new HashMap<>();

    public KycMergeService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    /**
     * Merges all entities from finance and KYC APIs into a map.
     * @return The map of all merged entities
     */
    public Map<String, MergedEntity> mergeAllEntities() {
        File1Root financeData = fetchFinanceData();
        File2Root kycData = fetchKycData();

        // Clear existing entries
        mergedEntitiesMap.clear();

        if (financeData != null && kycData != null) {
            financeData.getResults().forEach(financeResult -> {
                if (financeResult.getEntity() != null && 
                    financeResult.getEntity().getIdentifiers() != null && 
                    financeResult.getEntity().getIdentifiers().getPtyId() != null) {
                    
                    String ptyId = financeResult.getEntity().getIdentifiers().getPtyId();

                    // Find matching KYC results
                    kycData.getResults().stream()
                        .filter(kycResult -> kycResult.getIdentifiers() != null && 
                                !kycResult.getIdentifiers().isEmpty())
                        .filter(kycResult -> ptyId.equals(kycResult.getIdentifiers().get(0).getPtyId()))
                        .findFirst()
              
