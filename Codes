package org.example.service;

import org.example.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import javax.annotation.PostConstruct;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class EntityMergerService {

    @Autowired
    private RestTemplate restTemplate;

    @Value("${finance.api.url}")
    private String financeApiUrl;

    @Value("${kyc.api.url}")
    private String kycApiUrl;

    private final List<MergedEntity> mergedEntities = Collections.synchronizedList(new ArrayList<>());

    @PostConstruct
    public void loadAndMergeData() {
        try {
            FinanceFile financeData = restTemplate.getForObject(financeApiUrl, FinanceFile.class);
            KYCFile kycData = restTemplate.getForObject(kycApiUrl, KYCFile.class);

            if (financeData != null && kycData != null) {
                List<MergedEntity> newMerged = financeData.getResults().getEntities().stream()
                    .flatMap(financeEntity -> 
                        kycData.getResults().stream()
                            .flatMap(kycResult -> {
                                KycData kycDataItem = kycResult.getKycData();
                                return kycDataItem.getKyCsites().stream()
                                    .filter(kycSite -> financeEntity.getIdentifiers().getPtyId()
                                        .equals(kycSite.getSiteEntity()))
                                    .map(kycSite -> mergeEntities(financeEntity, kycDataItem, kycSite));
                            })
                    )
                    .collect(Collectors.toList());

                synchronized (mergedEntities) {
                    mergedEntities.clear();
                    mergedEntities.addAll(newMerged);
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("Failed to load and merge data", e);
        }
    }

    private MergedEntity mergeEntities(Entity finance, KycData kycData, KYCsites kycSite) {
        MergedEntity merged = new MergedEntity();
        merged.setIdentifiers(finance.getIdentifiers());
        merged.setBusinessAddress(finance.getBusinessAddress());
        merged.setKyCsites(Collections.singletonList(kycSite));
        merged.setKyCsegment(kycData.getKyCsegment());
        merged.setRiskIndustry(kycData.getRiskIndustry());
        return merged;
    }

    public List<MergedEntity> getAll() {
        return Collections.unmodifiableList(mergedEntities);
    }

    public List<MergedEntity> getBySector(String sector) {
        return mergedEntities.stream()
            .filter(entity -> entity.getBusinessAddress().getCity().equalsIgnoreCase(sector))
            .collect(Collectors.toList());
    }

    public Optional<MergedEntity> getByIdentifier(String ptyId) {
        return mergedEntities.stream()
            .filter(entity -> entity.getIdentifiers().getPtyId().equals(ptyId))
            .findFirst();
    }
}
