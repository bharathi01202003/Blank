package org.example.service;

import org.example.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.*;

@Service
public class DataService {

    @Autowired
    private WebClient webClient;

    @Value("${api.finance.url}")
    private String financeUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    public List<MergedEntity> fetchAndMergeData() {
        try {
            File1Root financeData = fetch(financeUrl, File1Root.class);
            File2Root kycData = fetch(kycUrl, File2Root.class);

            return mergeData(financeData, kycData);
        } catch (Exception e) {
            System.err.println("Failed to merge data: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    private <T> T fetch(String url, Class<T> clazz) {
        return webClient.get()
                .uri(url)
                .retrieve()
                .onStatus(status -> status.isError(), response -> {
                    System.err.println("API Error: " + response.statusCode());
                    return Mono.error(new RuntimeException("API call failed with status: " + response.statusCode()));
                })
                .bodyToMono(clazz)
                .block();
    }

    private List<MergedEntity> mergeData(File1Root financeData, File2Root kycData) {
        if (financeData == null || kycData == null) return Collections.emptyList();

        List<MergedEntity> merged = new ArrayList<>();

        for (File1Result financeResult : financeData.getResults()) {
            if (financeResult.getEntity() == null || financeResult.getEntity().getIdentifiers() == null) continue;

            Identifiers financeId = financeResult.getEntity().getIdentifiers();

            Optional<File2Result> match = kycData.getResults().stream()
                .filter(kyc -> kyc.getIdentifiers() != null && !kyc.getIdentifiers().isEmpty())
                .filter(kyc -> financeId.getPtyId().equals(kyc.getIdentifiers().get(0).getPtyId()))
                .findFirst();

            match.ifPresent(kyc -> {
                MergedEntity mergedEntity = new MergedEntity();
                mergedEntity.setIdentifiers(Collections.singletonList(financeId));
                mergedEntity.setBusinessAddress(financeResult.getEntity().getBusinessAddress());

                KycData kycDataObj = kyc.getKycData();
                if (kycDataObj != null) {
                    mergedEntity.setKycSites(kycDataObj.getKycSites());
                    mergedEntity.setKycSegment(kycDataObj.getKycSegment());
                    mergedEntity.setRiskIndustry(kycDataObj.getRiskIndustry());
                }

                merged.add(mergedEntity);
            });
        }

        return merged;
    }
} 
