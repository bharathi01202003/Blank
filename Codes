package com.example.service;

import com.example.model.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class FileMergerService {

    private static final Logger logger = LoggerFactory.getLogger(FileMergerService.class);
    
    @Value("${file.paths.finance}")
    private String financeFilePath;
    
    @Value("${file.paths.kyc}")
    private String kycFilePath;

    private final ObjectMapper mapper;

    public FileMergerService(ObjectMapper mapper) {
        this.mapper = mapper;
    }

    public List<MergedEntity> mergeFiles() throws IOException, JsonProcessingException, IllegalArgumentException {
        // Load resources using injected paths
        Resource financeFileResource = new ClassPathResource(financeFilePath);
        Resource kycFileResource = new ClassPathResource(kycFilePath);
        
        verifyResourcesExist(financeFileResource, kycFileResource);

        String financeJson = readFileContent(financeFileResource);
        String kycJson = readFileContent(kycFileResource);
        
        if (!StringUtils.hasText(financeJson) || !StringUtils.hasText(kycJson)) {
            throw new IllegalArgumentException("One or both files are empty");
        }

        File1Root financeData = parseJson(financeJson, File1Root.class);
        File2Root kycData = parseJson(kycJson, File2Root.class);

        logger.info("Successfully parsed files: {} and {}", financeFilePath, kycFilePath);
        return mergeEntities(financeData, kycData);
    }

    private String readFileContent(Resource resource) throws IOException {
        try (InputStream is = resource.getInputStream()) {
            return new String(is.readAllBytes(), StandardCharsets.UTF_8);
        }
    }

    private <T> T parseJson(String json, Class<T> valueType) throws JsonProcessingException {
        return mapper.readValue(json, valueType);
    }

    private void verifyResourcesExist(Resource... resources) throws IOException {
        for (Resource resource : resources) {
            if (!resource.exists()) {
                String filename = resource.getFilename();
                logger.error("File not found: {}", filename);
                throw new IOException("File not found: " + filename);
            }
        }
    }

    private List<MergedEntity> mergeEntities(File1Root financeData, File2Root kycData) {
        if (financeData == null || kycData == null) {
            return Collections.emptyList();
        }

        return financeData.getResults().stream()
            .filter(result -> result.getEntity() != null && 
                            result.getEntity().getIdentifiers() != null)
            .flatMap(financeResult -> {
                Identifiers identifiers = financeResult.getEntity().getIdentifiers();
                String ptyId = identifiers.getPtyId();
                
                return kycData.getResults().stream()
                    .filter(kycResult -> kycResult.getIdentifiers() != null && 
                                       !kycResult.getIdentifiers().isEmpty())
                    .filter(kycResult -> ptyId.equals(kycResult.getIdentifiers().get(0).getPtyId()))
                    .map(kycResult -> createMergedEntity(financeResult, kycResult));
            })
            .collect(Collectors.toList());
    }

    private MergedEntity createMergedEntity(File1Result financeResult, File2Result kycResult) {
        MergedEntity merged = new MergedEntity();
        merged.setIdentifiers(financeResult.getEntity().getIdentifiers());
        merged.setBusinessAddress(financeResult.getEntity().getBusinessAddress());
        
        KycData kycData = kycResult.getKycData();
        if (kycData != null) {
            merged.setKyCsites(kycData.getKyCsites());
            merged.setKyCsegments(kycData.getKyCsegment());
            merged.setRiskIndustry(kycData.getRiskIndustry());
        }
        
        return merged;
    }
}
