package org.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class AppConfig {
    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}







package org.example.service;

import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
public class EntityMergeService {

    @Value("${api.auth.url}")
    private String authUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${api.finance.url}")
    private String financeUrl;

    @Value("${api.client.credentials}")
    private String clientCredentials;

    private final RestTemplate restTemplate;

    public EntityMergeService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public String getAccessToken() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "*/*;version=gamma");
        headers.set("Authorization", "Basic " + clientCredentials);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(
                authUrl,
                HttpMethod.POST,
                entity,
                String.class);

        // Parse the response to extract access_token (implementation depends on actual response format)
        // This is a simplified version - you might need to create a proper AuthResponse POJO
        return parseAccessToken(response.getBody());
    }

    private String parseAccessToken(String responseBody) {
        // Implement proper JSON parsing here
        // This is just a placeholder
        if (responseBody.contains("access_token")) {
            return responseBody.split("\"access_token\":\"")[1].split("\"")[0];
        }
        throw new RuntimeException("Failed to parse access token");
    }

    public File2Root getKycData(String kycId, String accessToken) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "*/*;version=gamma");
        headers.set("Authorization", "Bearer " + accessToken);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        String url = UriComponentsBuilder.fromHttpUrl(kycUrl)
                .queryParam("kycId", kycId)
                .toUriString();

        return restTemplate.exchange(
                url,
                HttpMethod.GET,
                entity,
                File2Root.class).getBody();
    }

    public File1Root getFinanceData(String identifier, String accessToken) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "*/*;version=gamma");
        headers.set("Authorization", "Bearer " + accessToken);

        HttpEntity<String> entity = new HttpEntity<>(headers);

        String url = UriComponentsBuilder.fromHttpUrl(financeUrl)
                .queryParam("identifier", identifier)
                .toUriString();

        return restTemplate.exchange(
                url,
                HttpMethod.GET,
                entity,
                File1Root.class).getBody();
    }

    public MergedEntity mergeEntities(String identifier) {
        String accessToken = getAccessToken();

        // Get KYC data
        File2Root kycRoot = getKycData(identifier, accessToken);
        File2Result kycResult = kycRoot.getResults().get(0);

        // Get Finance data using one of the identifiers from KYC
        Integer kycId = kycResult.getIdentifiers().stream()
                .map(Identifiers::getKycId)
                .filter(Objects::nonNull)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("No KYC ID found"));

        File1Root financeRoot = getFinanceData(kycId.toString(), accessToken);
        File1Result financeResult = financeRoot.getResults().get(0);

        // Merge the data
        return createMergedEntity(financeResult.getEntity(), kycResult);
    }

    private MergedEntity createMergedEntity(Entity financeEntity, File2Result kycResult) {
        MergedEntity mergedEntity = new MergedEntity();
        
        mergedEntity.setIdentifiers(kycResult.getIdentifiers());
        mergedEntity.setBusinessAddress(financeEntity.getBusinessAddress());
        
        if (kycResult.getKycData() != null) {
            mergedEntity.setKycSites(kycResult.getKycData().getKycSites());
            mergedEntity.setKycSegment(kycResult.getKycData().getKycSegment());
            mergedEntity.setRiskIndustry(kycResult.getKycData().getRiskIndustry());
        }
        
        return mergedEntity;
    }

    public List<MergedEntity> mergeAllEntities() {
        String accessToken = getAccessToken();

        // Get all KYC data (assuming we can get all without specific ID)
        File2Root kycRoot = getKycData("all", accessToken);

        return kycRoot.getResults().stream()
                .map(kycResult -> {
                    Integer kycId = kycResult.getIdentifiers().stream()
                            .map(Identifiers::getKycId)
                            .filter(Objects::nonNull)
                            .findFirst()
                            .orElse(null);
                    
                    if (kycId != null) {
                        File1Root financeRoot = getFinanceData(kycId.toString(), accessToken);
                        if (!financeRoot.getResults().isEmpty()) {
                            return createMergedEntity(financeRoot.getResults().get(0).getEntity(), kycResult);
                        }
                    }
                    return null;
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
    }
}








package org.example.controller;

import org.example.model.MergedEntity;
import org.example.service.EntityMergeService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/entities")
public class EntityController {

    private final EntityMergeService entityMergeService;

    public EntityController(EntityMergeService entityMergeService) {
        this.entityMergeService = entityMergeService;
    }

    @GetMapping("/merge/{identifier}")
    public MergedEntity mergeEntities(@PathVariable String identifier) {
        return entityMergeService.mergeEntities(identifier);
    }

    @GetMapping("/merge/all")
    public List<MergedEntity> mergeAllEntities() {
        return entityMergeService.mergeAllEntities();
    }
}




api.auth.url=https://api-int.staging.echonet/oauth2/v1/token?grant_type=client_credentials
api.kyc.url=https://api-int.staging.echonet/ce-third-parties/v2/entities/kyc
api.finance.url=https://api-int.staging.echonet/ce-third-parties/v2/entities/finance
api.client.credentials=TUE2dH1jVEdFZjV3Tz1XbEdIR2RoVkdqakFnSXBPNE06NTVIWXBENjFIRWdJNThRRA==





package org.example.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    @ExceptionHandler(Exception.class)
    public ResponseEntity<Object> handleAllExceptions(Exception ex, WebRequest request) {
        return new ResponseEntity<>("An error occurred: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<Object> handleRuntimeExceptions(RuntimeException ex, WebRequest request) {
        return new ResponseEntity<>("Request failed: " + ex.getMessage(), HttpStatus.BAD_REQUEST);
    }
}



package org.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class EntityMergeApplication {
    public static void main(String[] args) {
        SpringApplication.run(EntityMergeApplication.class, args);
    }
}






