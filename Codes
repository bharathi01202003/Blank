package com.bnp.service;

import com.bnp.model.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.opencsv.CSVWriter;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.FileWriter;
import java.io.Writer;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Service
@RequiredArgsConstructor
public class DataService {

    private final Logger logger = LoggerFactory.getLogger(DataService.class);

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    @Value("${api.auth.url}")
    private String authUrl;

    @Value("${api.auth.authorization-header}")
    private String authHeader;  // e.g., Basic <encoded string>

    @Value("${api.finance.url}")
    private String financeUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    public void exportAllCrdsCodesToCsv(String filePath) {
        String token = fetchAuthToken();
        if (token == null) {
            logger.error("Failed to fetch token. Aborting.");
            return;
        }

        List<FinanceEntity> financeEntities = fetchFinanceData(token);
        List<KycEntity> kycEntities = fetchKycData(token);

        if (financeEntities == null || kycEntities == null) {
            logger.error("Failed to fetch data from APIs.");
            return;
        }

        Map<Integer, KycData> kycDataMap = kycEntities.stream()
            .map(KycEntity::getKycData)
            .filter(Objects::nonNull)
            .collect(Collectors.toMap(KycData::getKycId, k -> k, (a, b) -> a));

        try (Writer writer = new FileWriter(filePath);
             CSVWriter csvWriter = new CSVWriter(writer)) {

            csvWriter.writeNext(new String[]{
                "CRDSCODE", "Registration Address", "Country",
                "Site BNPP", "Site Country", "Site Status",
                "KYC Segment", "RIC"
            });

            for (FinanceEntity entity : financeEntities) {
                BusinessAddress address = entity.getBusinessAddress();
                String regAddress = buildAddressString(address);
                String country = address != null ? safe(address.getCountry()) : "";

                for (Identifiers id : entity.getIdentifiers()) {
                    String crdsCode = id.getCrdsCode();
                    Integer kycId = id.getKycId();

                    KycData kycData = kycId != null ? kycDataMap.get(kycId) : null;

                    String siteBnpp = "";
                    String siteCountry = "";
                    String siteStatus = "";
                    String kycSegment = "";
                    String ric = "";

                    if (kycData != null) {
                        Optional<KycSites> site = Optional.ofNullable(kycData.getKycSites())
                            .flatMap(list -> list.stream().findFirst());

                        siteBnpp = site.map(KycSites::getSiteBNPP).orElse("");
                        siteCountry = site.map(KycSites::getCountry).orElse("");
                        siteStatus = site.map(KycSites::getSiteStatus).orElse("");
                        kycSegment = safe(kycData.getKycSegment());
                        ric = Optional.ofNullable(kycData.getRiskIndustry())
                            .flatMap(list -> list.stream().findFirst())
                            .map(r -> r.getCode() + "-" + r.getDescription())
                            .orElse("");
                    }

                    csvWriter.writeNext(new String[]{
                        safe(crdsCode), regAddress, country,
                        siteBnpp, siteCountry, siteStatus,
                        kycSegment, ric
                    });
                }
            }

            logger.info("CSV written to: {}", filePath);

        } catch (Exception e) {
            logger.error("Error writing CSV", e);
        }
    }

    private String fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.set("Authorization", authHeader);
            headers.set("Accept", "*/*;version=gamma");
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authUrl, request, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JsonNode json = objectMapper.readTree(response.getBody());
                return json.get("access_token").asText();
            } else {
                logger.error("Failed to fetch token. Status: {}", response.getStatusCode());
            }
        } catch (Exception e) {
            logger.error("Error fetching token", e);
        }
        return null;
    }

    private List<FinanceEntity> fetchFinanceData(String token) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(token);
            HttpEntity<Void> request = new HttpEntity<>(headers);

            ResponseEntity<FinanceResponse> response = restTemplate.exchange(
                financeUrl, HttpMethod.GET, request, FinanceResponse.class);

            return response.getBody() != null ? response.getBody().getResults() : Collections.emptyList();
        } catch (Exception e) {
            logger.error("Error fetching finance data", e);
            return null;
        }
    }

    private List<KycEntity> fetchKycData(String token) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(token);
            HttpEntity<Void> request = new HttpEntity<>(headers);

            ResponseEntity<KycResponse> response = restTemplate.exchange(
                kycUrl, HttpMethod.GET, request, KycResponse.class);

            return response.getBody() != null ? response.getBody().getResults() : Collections.emptyList();
        } catch (Exception e) {
            logger.error("Error fetching KYC data", e);
            return null;
        }
    }

    private String buildAddressString(BusinessAddress addr) {
        if (addr == null) return "";
        return Stream.of(addr.getLine1(), addr.getLine2(), addr.getCity(), addr.getState(), addr.getZipcode())
                .filter(Objects::nonNull)
                .collect(Collectors.joining(" "));
    }

    private String safe(String val) {
        return val != null ? val : "";
    }
}
