package com.bnp.service;

import com.bnp.model.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    /* ────────────────────────── FIELDS & DI  ────────────────────────── */
    private static final Logger logger = LoggerFactory.getLogger(DataService.class);

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    /* ─────────────────────────── TOKEN FETCH ────────────────────────── */
    private void fetchAuthToken() {
        try {
            HttpHeaders h = new HttpHeaders();
            h.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            h.set("Authorization", basicAuth);
            h.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            ResponseEntity<String> res =
                    restTemplate.postForEntity(authTokenUrl, new HttpEntity<>("", h), String.class);

            if (!res.getStatusCode().is2xxSuccessful()) {
                logger.error("Auth API status: {}", res.getStatusCode());
                token = null;
                return;
            }

            token = mapper.readTree(res.getBody()).path("access_token").asText(null);
            if (token == null || token.isBlank()) {
                logger.error("access_token missing in auth response");
            }
        } catch (Exception ex) {
            logger.error("Exception while fetching auth token", ex);
            token = null;
        }
    }

    /* ────────────────────────── PUBLIC MERGE ────────────────────────── */
    public List<MergedEntity> getMergedEntities() {
        fetchAuthToken();
        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        logger.info("Finance results count: {}", financeResults.size());

        return StreamSupport.stream(financeResults.spliterator(), false)
                .map(r -> r.path("entity"))
                .filter(e -> e.has("identifiers") && e.path("identifiers").has("ptyId"))
                .map(this::mergeForSinglePtyId)
                .collect(Collectors.toList());
    }

    /* ─────────────────────────── MERGE ONE  ─────────────────────────── */
    private MergedEntity mergeForSinglePtyId(JsonNode financeEntity) {

        Identifiers identifiers = mapper.convertValue(financeEntity.path("identifiers"), Identifiers.class);
        BusinessAddress businessAddress =
                mapper.convertValue(financeEntity.path("businessAddress"), BusinessAddress.class);

        RegistrationAddress registrationAddress = financeEntity.has("registrationAddress")
                ? mapper.convertValue(financeEntity.path("registrationAddress"), RegistrationAddress.class)
                : null;

        String ptyId = identifiers.getPtyId();

        List<KycSites>     kycSites     = null;
        String             kycSegment   = null;
        List<RiskIndustry> riskIndustry = null;

        if (ptyId != null && token != null && !token.isBlank()) {
            JsonNode kycRoot = fetchJson(kycUrl + "?ptyId=" + ptyId);
            JsonNode kycData = kycRoot.path("results").isArray() && kycRoot.path("results").size() > 0
                    ? kycRoot.path("results").get(0).path("kycData")
                    : mapper.createObjectNode();

            if (!kycData.isMissingNode()) {
                if (kycData.path("kycSites").isArray()) {
                    kycSites = mapper.convertValue(kycData.path("kycSites"), new TypeReference<>() {});
                }
                kycSegment = kycData.has("kycSegment") ? kycData.path("kycSegment").asText(null) : null;
                if (kycData.path("riskIndustry").isArray()) {
                    riskIndustry = mapper.convertValue(kycData.path("riskIndustry"), new TypeReference<>() {});
                }
            } else {
                logger.info("No KYC data found for ptyId {}", ptyId);
            }
        }

        return new MergedEntity(
                List.of(identifiers),
                businessAddress,
                registrationAddress,
                kycSites,
                kycSegment,
                riskIndustry
        );
    }

    /* ────────────────────────── GET JSON SAFE ───────────────────────── */
    private JsonNode fetchJson(String url) {
        try {
            HttpHeaders h = new HttpHeaders();
            h.add("Accept", "*/*;version=gamma");
            if (token != null && !token.isBlank()) h.setBearerAuth(token);

            ResponseEntity<String> res = restTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(h), String.class);

            if (!res.getStatusCode().is2xxSuccessful()) {
                logger.error("GET {} returned status {}", url, res.getStatusCode());
                return mapper.createObjectNode();
            }
            return mapper.readTree(res.getBody());
        } catch (Exception e) {
            logger.error("Exception while fetching {}", url, e);
            return mapper.createObjectNode();
        }
    }

    /* ──────────────────── EXPORT TO SEMI‑COLON CSV ──────────────────── */
    public void exportMergedEntitiesToFile(String filePath) {
        List<MergedEntity> entities = getMergedEntities();

        // Ensure output directory exists
        File outFile = new File(filePath);
        outFile.getParentFile().mkdirs();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outFile))) {
            writer.write("CRDSCODE;Registration Address;Country;Site BNPP;Site Country;Site Status;KYC Segment;RIC\n");

            for (MergedEntity entity : entities) {
                if (entity.getIdentifiers() == null || entity.getIdentifiers().isEmpty()) continue;

                Identifiers id   = entity.getIdentifiers().get(0);
                String crdsCode  = safe(id.getCrdsCode());

                RegistrationAddress reg = entity.getRegistrationAddress();
                String regAddress = reg != null
                        ? Stream.of(reg.getLine1(), reg.getLine2(), reg.getCity(), reg.getState(), reg.getZipCode())
                                .filter(s -> s != null && !s.isBlank())
                                .map(this::safe)
                                .collect(Collectors.joining(" "))
                        : "";

                String regCountry = reg != null ? safe(reg.getCountry()) : "";

                KycSites site = entity.getKycSites() != null && !entity.getKycSites().isEmpty()
                        ? entity.getKycSites().get(0) : null;

                String siteName    = site != null ? safe(site.getSiteName())    : "";
                String siteCountry = site != null ? safe(site.getSiteCountry()) : "";
                String siteStatus  = site != null ? safe(site.getSiteStatus())  : "";

                String kycSegment  = safe(entity.getKycSegment());

                String ric = "";
                if (entity.getRiskIndustry() != null && !entity.getRiskIndustry().isEmpty()) {
                    ric = entity.getRiskIndustry().stream()
                            .map(ri -> safe(ri.getRiskIndustryCode()) + "-" + safe(ri.getRiskIndustryDescription()))
                            .collect(Collectors.joining(","));
                }

                String row = String.join(";", crdsCode, regAddress, regCountry,
                        siteName, siteCountry, siteStatus, kycSegment, ric);
                writer.write(row + "\n");
            }

            logger.info("File successfully written to {}", outFile.getAbsolutePath());

        } catch (IOException e) {
            logger.error("Error writing to file {}", filePath, e);
        }
    }

    /* ─────────────────────────── UTIL SAFE ──────────────────────────── */
    private String safe(String v) {
        return v == null ? "" : v.trim().replace(";", " ");
    }
}
