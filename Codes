package org.example.service;

import org.example.model.File1Root;
import org.example.model.File2Root;
import org.example.model.MergedEntity;
import org.example.model.File1Result;
import org.example.model.File2Result;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Service
public class DataService {

    private final WebClient webClient;
    private static final Logger logger = LoggerFactory.getLogger(DataService.class);
    private static final int MAX_RETRIES = 3;

    @Value("${api.finance.url}")
    private String financeUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Autowired
    public DataService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.build();
    }

    public List<MergedEntity> fetchMergedData() {
        try {
            // Check DNS resolution
            InetAddress address = InetAddress.getByName("api-int.staging.echonet");
            logger.info("Resolved hostname: {}", address.getHostAddress());
        } catch (IOException e) {
            logger.error("Hostname could not be resolved: api-int.staging.echonet", e);
            return Collections.emptyList(); // Exit if DNS resolution fails
        }

        File1Root financeData = fetch(financeUrl, File1Root.class);
        File2Root kycData = fetch(kycUrl, File2Root.class);

        return mergeData(financeData, kycData);
    }

    private <T> T fetch(String url, Class<T> clazz) {
        int attempts = 0;
        boolean success = false;
        T result = null;

        while (attempts < MAX_RETRIES && !success) {
            try {
                result = webClient.get()
                        .uri(url)
                        .header("Accept", "*/*;version=gamma") // Add the Accept header
                        .header("Authorization", "Bearer " + System.getProperty("api.token")) // Use the token from properties
                        .retrieve()
                        .bodyToMono(clazz)
                        .block();
                success = true; // Set to true if the call is successful
            } catch (Exception e) {
                attempts++;
                logger.warn("Attempt {} failed: {}", attempts, e.getMessage());
                if (attempts >= MAX_RETRIES) {
                    logger.error("Max retries reached. Giving up on API call.");
                }
            }
        }
        return result;
    }

    private List<MergedEntity> mergeData(File1Root financeData, File2Root kycData) {
        if (financeData == null || kycData == null) return Collections.emptyList();

        List<MergedEntity> merged = new ArrayList<>();

        for (File1Result financeResult : financeData.getResults()) {
            if (financeResult.getEntity() == null || financeResult.getEntity().getIdentifiers() == null) continue;

            Identifiers financeId = financeResult.getEntity().getIdentifiers();
            Optional<File2Result> match = kycData.getResults().stream()
                    .filter(kyc -> kyc.getIdentifiers() != null && !kyc.getIdentifiers().isEmpty() &&
                            financeId.getPtyId().equals(kyc.getIdentifiers().get(0).getPtyId()))
                    .findFirst();

            match.ifPresent(kyc -> {
                MergedEntity mergedEntity = new MergedEntity();
                mergedEntity.setIdentifiers(Collections.singletonList(financeId));
                mergedEntity.setBusinessAddress(financeResult.getEntity().getBusinessAddress());

                KycData kycDataObj = kyc.getKycData();
                if (kycDataObj != null) {
                    mergedEntity.setKycSites(kycDataObj.getKycSites());
                    mergedEntity.setKycSegment(kycDataObj.getKycSegment());
                    mergedEntity.setRiskIndustry(kycDataObj.getRiskIndustry());
                }

                merged.add(mergedEntity);
            });
        }

        return merged;
    }
}
