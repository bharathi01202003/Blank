import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class DataService {

    @Value("${finance.api.url}")
    private final String financeApiUrl;

    @Value("${kyc.api.url}")
    private final String kycApiUrl;

    private final RestTemplate restTemplate;

    public ResultObject fetchCombinedData(String accessToken) {
        // 1. Fetch finance data
        FinanceResponse financeResponse = restTemplate.getForObject(
            financeApiUrl, 
            FinanceResponse.class
        );

        // 2. Fetch KYC data
        KycResponse kycResponse = restTemplate.getForObject(
            kycApiUrl, 
            KycResponse.class
        );

        // 3. Combine data using Stream API
        return ResultObject.builder()
            .identifier(financeResponse.getEntity().getIdentifier())
            .businessAddress(financeResponse.getEntity().getBusinessAddress())
            .kycData(KycData.builder()
                .kycSegments(filterKycSegments(
                    kycResponse.getEntity().getKycData().getKycSegments(),
                    kycResponse.getEntity().getIdentifiers()
                ))
                .kycSites(kycResponse.getEntity().getKycData().getKycSites())
                .riskIndustries(kycResponse.getEntity().getKycData().getRiskIndustries())
                .build())
            .build();
    }

    private List<KycSegment> filterKycSegments(List<KycSegment> segments, List<Identifier> identifiers) {
        return segments.stream()
            .filter(segment -> identifiers.stream()
                .anyMatch(id -> id.getId().equals(segment.getId())))
            .collect(Collectors.toList());
    }
}
