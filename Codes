// Main.java
package org.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Main {
    public static void main(String[] args) {
        SpringApplication.run(Main.class, args);
    }
}

// AppConfig.java
package org.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class AppConfig {
    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder();
    }
}

// MergeController.java
package org.example.controller;

import org.example.dto.MergedEntity;
import org.example.service.DataService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
public class MergeController {

    @Autowired
    private DataService dataService;

    @GetMapping("/merge")
    public List<MergedEntity> getMergedEntities() {
        return dataService.fetchAndMergeData();
    }
}

// DataService.java
package org.example.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class DataService {

    @Autowired
    private WebClient.Builder webClientBuilder;

    private final String authUrl = "https://api-int.staging.echonet/oauth2/v1/token?grant_type=client_credentials";
    private final String financeUrl = "https://api-int.staging.echonet/ce-third-parties/v2/batch-export?type=FinanceCH";
    private final String kycUrl = "https://api-int.staging.echonet/ce-third-parties/v2/entities/kyc?ptyId=69";

    public List<MergedEntity> fetchAndMergeData() {
        String token = fetchAuthToken();
        if (token == null) return Collections.emptyList();

        File1Root financeRoot = fetchFinanceData(token);
        File2Root kycRoot = fetchKycData(token);
        if (financeRoot == null || kycRoot == null) return Collections.emptyList();

        return financeRoot.getResults().stream()
                .map(File1Result::getEntity)
                .filter(entity -> entity.getIdentifiers() != null && entity.getIdentifiers().getKycId() != null)
                .flatMap(finEntity -> {
                    Integer financeKycId = finEntity.getIdentifiers().getKycId();

                    return kycRoot.getResults().stream()
                            .filter(kycResult ->
                                    kycResult.getIdentifiers().stream()
                                            .anyMatch(kid -> kid.getKycId().equals(financeKycId)))
                            .map(kycResult -> {
                                KycData kycData = kycResult.getKycData();

                                return new MergedEntity(
                                        Collections.singletonList(finEntity.getIdentifiers()),
                                        finEntity.getBusinessAddress(),
                                        kycData.getKycSites(),
                                        kycData.getKycSegment(),
                                        kycData.getRiskIndustry()
                                );
                            });
                })
                .collect(Collectors.toList());
    }

    private String fetchAuthToken() {
        try {
            String response = webClientBuilder.build()
                    .post()
                    .uri(authUrl)
                    .header(HttpHeaders.ACCEPT, "*/*;version=gamma")
                    .header(HttpHeaders.AUTHORIZATION, "Basic TUE2dH1jVEdFZjV3Tz1XbEdIR2RoVkdqakFnSXBPNE06NTVIWXBENFIRWdJNThRRA==")
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            return new ObjectMapper().readTree(response).get("access_token").asText();
        } catch (Exception e) {
            System.err.println("Error fetching token: " + e.getMessage());
            return null;
        }
    }

    private File1Root fetchFinanceData(String token) {
        try {
            return webClientBuilder.build()
                    .get()
                    .uri(financeUrl)
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                    .retrieve()
                    .bodyToMono(File1Root.class)
                    .block();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private File2Root fetchKycData(String token) {
        try {
            return webClientBuilder.build()
                    .get()
                    .uri(kycUrl)
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                    .retrieve()
                    .bodyToMono(File2Root.class)
                    .block();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
