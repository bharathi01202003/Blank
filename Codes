package com.example.service;

import com.example.model.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class FileMergerService {

    private static final Logger logger = LoggerFactory.getLogger(FileMergerService.class);
    private final ObjectMapper mapper;

    public FileMergerService(ObjectMapper mapper) {
        this.mapper = mapper;
    }

    /**
     * Merges data from two JSON files based on matching party IDs
     * @return List of merged entities
     * @throws IOException if file operations fail
     * @throws JsonProcessingException if JSON parsing fails
     * @throws IllegalArgumentException if files are empty or invalid
     */
    public List<MergedEntity> mergeFiles() throws IOException, JsonProcessingException, IllegalArgumentException {
        // Load resources
        Resource file1Resource = new ClassPathResource("FinanceCH_2025-03-11 2.json");
        Resource file2Resource = new ClassPathResource("kyc.json");
        
        // Verify resources exist
        verifyResourcesExist(file1Resource, file2Resource);

        // Read and validate file contents
        String json1 = readFileContent(file1Resource);
        String json2 = readFileContent(file2Resource);
        
        if (!StringUtils.hasText(json1) || !StringUtils.hasText(json2)) {
            throw new IllegalArgumentException("One or both files are empty");
        }

        // Parse JSON
        File1Root file1Root = parseJson(json1, File1Root.class);
        File2Root file2Root = parseJson(json2, File2Root.class);

        logger.info("Successfully parsed both JSON files");
        return mergeEntities(file1Root, file2Root);
    }

    private String readFileContent(Resource resource) throws IOException {
        try (InputStream is = resource.getInputStream()) {
            return new String(is.readAllBytes(), StandardCharsets.UTF_8);
        }
    }

    private <T> T parseJson(String json, Class<T> valueType) throws JsonProcessingException {
        return mapper.readValue(json, valueType);
    }

    private void verifyResourcesExist(Resource... resources) throws IOException {
        for (Resource resource : resources) {
            if (!resource.exists()) {
                throw new IOException("File not found: " + resource.getFilename());
            }
        }
    }

    private List<MergedEntity> mergeEntities(File1Root file1Root, File2Root file2Root) {
        if (file1Root == null || file2Root == null) {
            return Collections.emptyList();
        }

        return file1Root.getResults().stream()
            .filter(file1Result -> file1Result.getEntity() != null && 
                                 file1Result.getEntity().getIdentifiers() != null)
            .flatMap(file1Result -> {
                Identifiers file1Identifiers = file1Result.getEntity().getIdentifiers();
                String ptyId = file1Identifiers.getPtyId();
                
                return file2Root.getResults().stream()
                    .filter(file2Result -> file2Result.getIdentifiers() != null && 
                                         !file2Result.getIdentifiers().isEmpty())
                    .filter(file2Result -> ptyId.equals(file2Result.getIdentifiers().get(0).getPtyId()))
                    .map(file2Result -> createMergedEntity(file1Result, file2Result));
            })
            .collect(Collectors.toList());
    }

    private MergedEntity createMergedEntity(File1Result file1Result, File2Result file2Result) {
        MergedEntity merged = new MergedEntity();
        merged.setIdentifiers(file1Result.getEntity().getIdentifiers());
        merged.setBusinessAddress(file1Result.getEntity().getBusinessAddress());
        
        KycData kycData = file2Result.getKycData();
        if (kycData != null) {
            merged.setKyCsites(kycData.getKyCsites());
            merged.setKyCsegments(kycData.getKyCsegment());
            merged.setRiskIndustry(kycData.getRiskIndustry());
        }
        
        return merged;
    }
}
