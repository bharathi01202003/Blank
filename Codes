import com.fasterxml.jackson.annotation.JsonInclude;
import com.sun.codemodel.JCodeModel;
import org.jsonschema2pojo.*;
import org.jsonschema2pojo.rules.RuleFactory;

import java.io.File;
import java.io.IOException;
import java.net.URL;

public class Main {

    public static void main(String[] args) {
        System.out.println("Hello, World!");

        try {
            // Example usage
            URL inputJsonUrl = new URL("https://example.com/schema.json");
            File outputDir = new File("src/generated"); // Output directory
            String packageName = "com.example.generated";
            String javaClassName = "MyGeneratedClass";

            convertJsonToJavaClass(inputJsonUrl, outputDir, packageName, javaClassName);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void convertJsonToJavaClass(URL inputJsonUrl,
                                              File outputJavaClassDirectory,
                                              String packageName,
                                              String javaClassName) throws IOException {

        JCodeModel codeModel = new JCodeModel();

        GenerationConfig config = new DefaultGenerationConfig() {
            @Override
            public boolean isGenerateBuilders() {
                return true; // Generate builder methods
            }

            @Override
            public SourceType getSourceType() {
                return SourceType.JSON; // Input is a raw JSON (not a schema file)
            }

            @Override
            public boolean isIncludeConstructors() {
                return true;
            }

            @Override
            public boolean isIncludeHashcodeAndEquals() {
                return true;
            }

            @Override
            public boolean isIncludeToString() {
                return true;
            }

            @Override
            public AnnotationStyle getAnnotationStyle() {
                return AnnotationStyle.JACKSON2;
            }

            @Override
            public JsonInclude.Include getInclusionLevel() {
                return JsonInclude.Include.NON_NULL;
            }
        };

        SchemaMapper mapper = new SchemaMapper(
                new RuleFactory(config, new Jackson2Annotator(config), new SchemaStore()),
                new SchemaGenerator()
        );

        mapper.generate(codeModel, javaClassName, packageName, inputJsonUrl);

        codeModel.build(outputJavaClassDirectory);
    }
}
