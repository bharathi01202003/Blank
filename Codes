package com.bnp.service;

import com.bnp.model.*;
import com.bnp.repository.MergedEntityRepository;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private static final Logger logger = LoggerFactory.getLogger(DataService.class);

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;
    private final MergedEntityRepository mergedEntityRepository;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate, MergedEntityRepository mergedEntityRepository) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
        this.mergedEntityRepository = mergedEntityRepository;
    }

    /**
     * Unified method to process merged entities with options for both database and CSV output
     */
    @Transactional
    public void processMergedEntities(boolean saveToDb, String csvFilePath) {
        List<MergedEntity> entities = getMergedEntities();
        
        if (saveToDb) {
            saveToDatabase(entities);
        }
        
        if (csvFilePath != null && !csvFilePath.isEmpty()) {
            exportToCsv(entities, csvFilePath);
        }
    }

    /**
     * Fetches authentication token from auth service
     */
    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                logger.error("Auth token API failed: {}", response.getStatusCode());
                token = null;
                return;
            }

            JsonNode json = mapper.readTree(response.getBody());
            token = json.path("access_token").asText(null);

            if (token == null || token.isBlank()) {
                logger.error("Access token missing in auth response");
            }

        } catch (Exception e) {
            logger.error("Error while fetching auth token", e);
            token = null;
        }
    }

    /**
     * Retrieves merged entities from all data sources
     */
    public List<MergedEntity> getMergedEntities() {
        fetchAuthToken();
        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        logger.info("Retrieved {} finance entities", financeResults.size());

        return StreamSupport.stream(financeResults.spliterator(), false)
                .map(result -> result.path("entity"))
                .filter(entity -> entity.has("identifiers") && entity.path("identifiers").has("ptyId"))
                .map(this::mergeForSinglePtyId)
                .collect(Collectors.toList());
    }

    /**
     * Merges data for a single entity based on its identifiers
     */
    private MergedEntity mergeForSinglePtyId(JsonNode financeEntity) {
        Identifiers identifiers = mapper.convertValue(financeEntity.path("identifiers"), Identifiers.class);
        BusinessAddress businessAddress = mapper.convertValue(financeEntity.path("businessAddress"), BusinessAddress.class);
        RegistrationAddress registrationAddress = financeEntity.has("registrationAddress")
                ? mapper.convertValue(financeEntity.path("registrationAddress"), RegistrationAddress.class)
                : null;

        String ptyId = identifiers.getPtyId() != null ? identifiers.getPtyId().toString() : null;

        List<KycSites> kycSites = null;
        String kycSegment = null;
        List<RiskIndustry> riskIndustry = null;

        if (ptyId != null && token != null) {
            JsonNode kycRoot = fetchJson(kycUrl + "?ptyId=" + ptyId);
            JsonNode kycData = kycRoot.path("results").isArray() && kycRoot.path("results").size() > 0
                    ? kycRoot.path("results").get(0).path("kycData")
                    : mapper.createObjectNode();

            if (!kycData.isMissingNode()) {
                if (kycData.path("kycSites").isArray()) {
                    kycSites = mapper.convertValue(kycData.path("kycSites"), new TypeReference<>() {});
                }
                kycSegment = kycData.has("kycSegment") ? kycData.path("kycSegment").asText(null) : null;
                if (kycData.path("riskIndustry").isArray()) {
                    riskIndustry = mapper.convertValue(kycData.path("riskIndustry"), new TypeReference<>() {});
                }
            } else {
                logger.info("No KYC data for ptyId: {}", ptyId);
            }
        }

        return new MergedEntity(
                List.of(identifiers),
                businessAddress,
                registrationAddress,
                kycSites,
                kycSegment,
                riskIndustry
        );
    }

    /**
     * Makes HTTP request and returns JSON response
     */
    private JsonNode fetchJson(String url) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.add("Accept", "*/*;version=gamma");
            if (token != null && !token.isBlank()) {
                headers.setBearerAuth(token);
            }

            HttpEntity<String> request = new HttpEntity<>(headers);
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                logger.error("GET {} failed with status {}", url, response.getStatusCode());
                return mapper.createObjectNode();
            }

            return mapper.readTree(response.getBody());
        } catch (Exception e) {
            logger.error("Exception while calling {}", url, e);
            return mapper.createObjectNode();
        }
    }

    /**
     * Saves entities to H2 database
     */
    private void saveToDatabase(List<MergedEntity> entities) {
        mergedEntityRepository.deleteAll();
        
        entities.forEach(entity -> {
            MergedEntityRecord record = convertToRecord(entity);
            mergedEntityRepository.save(record);
        });
        
        logger.info("Saved {} entities to database", entities.size());
    }

    /**
     * Converts MergedEntity to database record format
     */
    private MergedEntityRecord convertToRecord(MergedEntity entity) {
        MergedEntityRecord record = new MergedEntityRecord();
        Identifiers id = entity.getIdentifiers().get(0);
        RegistrationAddress reg = entity.getRegistrationAddress();

        record.setCrdsCode(safe(id.getCrdsCode()));
        
        if (reg != null) {
            record.setRegistrationAddress(
                safe(reg.getLine1()) + " " + 
                safe(reg.getLine2()) + " " + 
                safe(reg.getCity()) + " " + 
                safe(reg.getState()) + " " + 
                safe(reg.getZipCode())
            );
            record.setCountry(safe(reg.getCountry()));
        }

        KycSites site = entity.getKycSites() != null && !entity.getKycSites().isEmpty() 
            ? entity.getKycSites().get(0) 
            : null;

        if (site != null) {
            record.setSiteName(safe(site.getSiteName()));
            record.setSiteCountry(safe(site.getSiteCountry()));
            record.setSiteStatus(safe(site.getSiteStatus()));
        }

        record.setKycSegment(safe(entity.getKycSegment()));

        if (entity.getRiskIndustry() != null) {
            record.setRiskIndustryCodes(
                entity.getRiskIndustry().stream()
                    .map(ri -> safe(ri.getRiskIndustryCode()) + "-" + safe(ri.getRiskIndustryDescription()))
                    .collect(Collectors.joining(","))
            );
        }
        
        return record;
    }

    /**
     * Exports entities to CSV file
     */
    private void exportToCsv(List<MergedEntity> entities, String filePath) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write("CRDSCODE;Registration Address;Country;Site BNPP;Site Country;Site Status;KYC Segment;RIC\n");

            for (MergedEntity entity : entities) {
                String csvLine = convertToCsvLine(entity);
                writer.write(csvLine + "\n");
            }

            logger.info("CSV file successfully written to {}", filePath);
        } catch (IOException e) {
            logger.error("Error writing to CSV file", e);
        }
    }

    /**
     * Converts MergedEntity to CSV line format
     */
    private String convertToCsvLine(MergedEntity entity) {
        Identifiers id = entity.getIdentifiers().get(0);
        RegistrationAddress reg = entity.getRegistrationAddress();

        String csvLine = String.join(";",
            safe(id.getCrdsCode()),
            reg != null ? formatRegistrationAddress(reg) : "",
            reg != null ? safe(reg.getCountry()) : "",
            entity.getKycSites() != null && !entity.getKycSites().isEmpty() ? 
                safe(entity.getKycSites().get(0).getSiteName()) : "",
            entity.getKycSites() != null && !entity.getKycSites().isEmpty() ? 
                safe(entity.getKycSites().get(0).getSiteCountry()) : "",
            entity.getKycSites() != null && !entity.getKycSites().isEmpty() ? 
                safe(entity.getKycSites().get(0).getSiteStatus()) : "",
            safe(entity.getKycSegment()),
            entity.getRiskIndustry() != null ? formatRiskIndustries(entity.getRiskIndustry()) : ""
        );

        return csvLine;
    }

    /**
     * Formats registration address components into a single string
     */
    private String formatRegistrationAddress(RegistrationAddress address) {
        return String.join(" ",
            safe(address.getLine1()),
            safe(address.getLine2()),
            safe(address.getCity()),
            safe(address.getState()),
            safe(address.getZipCode())
        );
    }

    /**
     * Formats risk industries into comma-separated string
     */
    private String formatRiskIndustries(List<RiskIndustry> riskIndustries) {
        return riskIndustries.stream()
            .map(ri -> safe(ri.getRiskIndustryCode()) + "-" + safe(ri.getRiskIndustryDescription()))
            .collect(Collectors.joining(","));
    }

    /**
     * Safely handles string values (null checks and sanitization)
     */
    private String safe(String value) {
        return (value == null) ? "" : value.trim().replaceAll(";", " ");
    }
}
