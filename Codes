package org.example.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.annotation.PostConstruct;
import org.example.model.PtyIdContainer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);

            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("Auth token API returned error: " + response.getStatusCode());
            }

            JsonNode json = mapper.readTree(response.getBody());
            this.token = json.path("access_token").asText();

            if (token == null || token.isBlank()) {
                throw new RuntimeException("Token not found in auth response");
            }

            System.out.println("Auth token: " + token);

        } catch (Exception e) {
            throw new RuntimeException("Failed to fetch token: " + e.getMessage(), e);
        }
    }

    public PtyIdContainer getAllPtyIdsFromFinance() {
        try {
            fetchAuthToken();

            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(this.token);
            headers.add("Accept", "*/*;version=gamma");

            HttpEntity<String> request = new HttpEntity<>(headers);

            ResponseEntity<String> financeResponse = restTemplate.exchange(
                    financeChUrl,
                    HttpMethod.GET,
                    request,
                    String.class
            );

            if (!financeResponse.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("FinanceCH API returned error: " + financeResponse.getStatusCode());
            }

            JsonNode financeResults = mapper.readTree(financeResponse.getBody()).path("results");

            System.out.println("Total results: " + financeResults.size());

            List<String> ptyIds = StreamSupport.stream(financeResults.spliterator(), false)
                    .map(result -> result.path("entity").path("identifiers").path("ptyId"))
                    .filter(JsonNode::isValueNode)
                    .map(JsonNode::asText)
                    .collect(Collectors.toList());

            System.out.println("Total ptyIds: " + ptyIds.size());

            return new PtyIdContainer(ptyIds);

        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to fetch ptyIds from Finance API", e);
        }
    }
}
