package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;                          // e.g. https://api-int.staging.echonet/ce-third-parties/v2/entities/kyc

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    /* ────────────────────────────────────────── TOKEN ───────────────────────────────────────── */

    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            ResponseEntity<String> response =
                    restTemplate.postForEntity(authTokenUrl, new HttpEntity<>("", headers), String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("Auth token API returned error: " + response.getStatusCode());
            }

            this.token = mapper.readTree(response.getBody()).path("access_token").asText();
            if (token == null || token.isBlank()) {
                throw new RuntimeException("Token not present in auth response");
            }

        } catch (Exception e) {
            throw new RuntimeException("Failed to fetch token: " + e.getMessage(), e);
        }
    }

    /* ─────────────────────────────── MAIN MERGE METHOD ─────────────────────────────── */

    public List<MergedEntity> getMergedEntities() {

        fetchAuthToken();                                  // ① get token once

        // ② pull FinanceCH results
        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        System.out.println("Finance results: " + financeResults.size());

        // ③ extract every ptyId in one pass
        List<String> ptyIds = StreamSupport.stream(financeResults.spliterator(), false)
                .map(r -> r.path("entity").path("identifiers").path("ptyId").asText())
                .filter(id -> id != null && !id.isBlank())
                .collect(Collectors.toList());

        // ④ for each ptyId build merged object
        return ptyIds.stream()
                .flatMap(ptyId -> mergeForPtyId(financeResults, ptyId))   // returns Stream<MergedEntity> (0 or 1)
                .collect(Collectors.toList());
    }

    /* ────────────────────────── HELPER: merge for one ptyId ────────────────────────── */

    private Stream<MergedEntity> mergeForPtyId(JsonNode financeResults, String ptyId) {

        // a) find the first finance result whose identifiers.ptyId == ptyId
        JsonNode financeMatch = StreamSupport.stream(financeResults.spliterator(), false)
                .filter(r -> ptyId.equals(r.path("entity").path("identifiers").path("ptyId").asText()))
                .findFirst()
                .orElse(null);

        if (financeMatch == null) return Stream.empty();   // shouldn’t happen

        BusinessAddress businessAddress =
                mapper.convertValue(financeMatch.path("entity").path("businessAddress"), BusinessAddress.class);

        Identifiers identifiers =
                mapper.convertValue(financeMatch.path("entity").path("identifiers"), Identifiers.class);

        // b) call KYC endpoint for that ptyId
        String kycEndpoint = kycUrl + "?ptyId=" + ptyId;
        JsonNode kycRoot = fetchJson(kycEndpoint);

        // KYC may return empty body or empty results → skip merge
        if (kycRoot.isMissingNode() || kycRoot.isEmpty()) return Stream.empty();

        JsonNode kycEntity = kycRoot.path("entity");       // adapt if your JSON is "results[0].entity"
        if (kycEntity.isMissingNode()) return Stream.empty();

        List<KycSites> kycSites = mapper.convertValue(
                kycEntity.path("kycSites"),
                new TypeReference<>() {}
        );

        String kycSegment = kycEntity.path("kycSegment").asText(null);

        List<RiskIndustry> riskIndustry = mapper.convertValue(
                kycEntity.path("riskIndustry"),
                new TypeReference<>() {}
        );

        MergedEntity merged = new MergedEntity(
                List.of(identifiers),
                businessAddress,
                kycSites,
                kycSegment,
                riskIndustry
        );

        return Stream.of(merged);
    }

    /* ──────────────────────────── HELPER: fetch JSON ──────────────────────────── */

    private JsonNode fetchJson(String url) {
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(this.token);
        headers.add("Accept", "*/*;version=gamma");

        ResponseEntity<String> res = restTemplate.exchange(
                url,
                HttpMethod.GET,
                new HttpEntity<>(headers),
                String.class
        );

        if (!res.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("GET " + url + " returned " + res.getStatusCode());
        }

        try {
            return mapper.readTree(res.getBody());
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON from " + url, e);
        }
    }
}
