package com.example.service;

import com.example.dto.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import javax.annotation.PostConstruct;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class EntityMergerService {
    
    private final List<MergedEntity> mergedEntities = new ArrayList<>();
    private final RestTemplate restTemplate;
    
    @Value("${finance.api.url}")
    private String financeApiUrl;
    
    @Value("${kyc.api.url}")
    private String kycApiUrl;

    public EntityMergerService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @PostConstruct
    public void loadAndMergeData() {
        try {
            FinanceFile financeData = restTemplate.getForObject(financeApiUrl, FinanceFile.class);
            KYCFile kycData = restTemplate.getForObject(kycApiUrl, KYCFile.class);
            
            if (financeData != null && financeData.getEntities() != null 
                && kycData != null && kycData.getEntities() != null) {
                
                this.mergedEntities.addAll(
                    financeData.getEntities().stream()
                        .flatMap(financeEntity -> 
                            kycData.getEntities().stream()
                                .filter(kycEntity -> financeEntity.getIdentifiers().contains(kycEntity.getIdentifier()))
                                .map(kycEntity -> mergeEntities(financeEntity, kycEntity))
                        )
                        .collect(Collectors.toList())
                );
            }
        } catch (Exception e) {
            throw new ApiException("Error loading and merging data from APIs", e);
        }
    }

    private MergedEntity mergeEntities(FinanceEntity finance, KYCEntity kyc) {
        MergedEntity merged = new MergedEntity();
        merged.setIdentifiers(finance.getIdentifiers());
        merged.setBusinessAddress(finance.getBusinessAddress());
        merged.setSector(finance.getSector());
        merged.setRestrictedCountries(kyc.getRestrictedCountries());
        merged.setRiskProfile(kyc.getRiskProfile());
        return merged;
    }

    // Business methods
    public List<MergedEntity> getBySector(String sector) {
        return mergedEntities.stream()
            .filter(entity -> entity.getSector().equalsIgnoreCase(sector))
            .collect(Collectors.toList());
    }

    public Optional<MergedEntity> getByIdentifier(String identifier) {
        return mergedEntities.stream()
            .filter(entity -> entity.getIdentifiers().contains(identifier))
            .findFirst();
    }

    public List<MergedEntity> getAll() {
        return Collections.unmodifiableList(mergedEntities);
    }
}
