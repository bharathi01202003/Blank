import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Component
public class DataMerger implements ApplicationRunner {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    public DataMerger(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    @Override
    public void run(ApplicationArguments args) throws Exception {
        // Fetch Finance data
        JsonNode financeData = restTemplate.getForObject("API_URL_FOR_FINANCE", JsonNode.class);
        
        // Fetch KYC data
        JsonNode kycData = restTemplate.getForObject("API_URL_FOR_KYC", JsonNode.class);

        // Extract results arrays
        JsonNode financeEntities = financeData.path("results");
        JsonNode kycEntities = kycData.path("results");

        // Merge based on identifiers
        List<JsonNode> mergedResults = new ArrayList<>();
        
        for (JsonNode financeEntity : financeEntities) {
            for (JsonNode kycEntity : kycEntities) {
                if (matchingIdentifiers(financeEntity, kycEntity)) {
                    mergedResults.add(mergeNodes(financeEntity, kycEntity));
                }
            }
        }

        // Output merged results to a file
        objectMapper.writerWithDefaultPrettyPrinter()
                   .writeValue(new File("merged_results.json"), mergedResults);
    }

    private boolean matchingIdentifiers(JsonNode finance, JsonNode kyc) {
        // Compare ptyId and crdsCode from both nodes
        return finance.path("entity").path("Identifiers").path("ptyId").asInt() ==
               kyc.path("identifiers").path("ptyId").asInt() &&
               finance.path("entity").path("Identifiers").path("crdsCode").asText().equals(
               kyc.path("identifiers").path("crdsCode").asText());
    }

    private JsonNode mergeNodes(JsonNode finance, JsonNode kyc) {
        // Create a new node to hold merged data
        JsonNode mergedNode = objectMapper.createObjectNode();
        
        // Add finance data
        ((ObjectNode) mergedNode).set("finance", finance);
        
        // Add KYC data
        ((ObjectNode) mergedNode).set("kyc", kyc);
        
        return mergedNode;
    }
}
