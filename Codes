package org.example.service;

import org.example.model.File1Root;
import org.example.model.File2Root;
import org.example.model.MergedEntity;
import org.example.model.File1Result;
import org.example.model.File2Result;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Service
public class DataService {

    private final WebClient webClient;
    private static final Logger logger = LoggerFactory.getLogger(DataService.class);

    @Value("${api.finance.url}")
    private String financeUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Autowired
    public DataService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.build();
    }

    public List<MergedEntity> fetchMergedData() {
        // Fetch data from APIs
        File1Root financeData = fetch(financeUrl, File1Root.class);
        File2Root kycData = fetch(kycUrl, File2Root.class);

        // Check if both data sources are not null before merging
        if (financeData != null && kycData != null) {
            return mergeData(financeData, kycData);
        } else {
            logger.warn("One or both data sources are null. Returning empty list.");
            return Collections.emptyList();
        }
    }

    private <T> T fetch(String url, Class<T> clazz) {
        try {
            logger.info("Fetching data from URL: {}", url);
            T result = webClient.get()
                    .uri(url)
                    .header("Accept", "*/*;version=gamma")
                    .header("Authorization", "Bearer " + System.getProperty("api.token"))
                    .retrieve()
                    .bodyToMono(clazz)
                    .block();

            // Print the response to the terminal
            logger.info("Response from {}: {}", url, result);
            return result; // Return the result if successful
        } catch (WebClientResponseException e) {
            logger.error("Error response from API: {} - Status code: {} - Body: {}", 
                         url, e.getStatusCode(), e.getResponseBodyAsString());
        } catch (Exception e) {
            logger.error("Failed to fetch data from URL {}: {}", url, e.getMessage());
        }
        return null; // Return null if the fetch fails
    }

    private List<MergedEntity> mergeData(File1Root financeData, File2Root kycData) {
        List<MergedEntity> merged = new ArrayList<>();

        for (File1Result financeResult : financeData.getResults()) {
            if (financeResult.getEntity() == null || financeResult.getEntity().getIdentifiers() == null) {
                continue; // Skip if entity or identifiers are null
            }

            Identifiers financeId = financeResult.getEntity().getIdentifiers();
            Optional<File2Result> match = kycData.getResults().stream()
                    .filter(kyc -> kyc.getIdentifiers() != null && !kyc.getIdentifiers().isEmpty() &&
                            financeId.getPtyId().equals(kyc.getIdentifiers().get(0).getPtyId()))
                    .findFirst();

            match.ifPresent(kyc -> {
                MergedEntity mergedEntity = new MergedEntity();
                mergedEntity.setIdentifiers(Collections.singletonList(financeId));
                mergedEntity.setBusinessAddress(financeResult.getEntity().getBusinessAddress());

                KycData kycDataObj = kyc.getKycData();
                if (kycDataObj != null) {
                    mergedEntity.setKycSites(kycDataObj.getKycSites());
                    mergedEntity.setKycSegment(kycDataObj.getKycSegment());
                    mergedEntity.setRiskIndustry(kycDataObj.getRiskIndustry());
                }

                merged.add(mergedEntity);
            });
        }

        logger.info("Merged {} entities from finance and KYC data.", merged.size());
        return merged;
    }
}
