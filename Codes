package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private static final Logger logger = LoggerFactory.getLogger(DataService.class);

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    // ────────────── 1. Fetch Auth Token ──────────────
    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                JsonNode json = mapper.readTree(response.getBody());
                token = json.path("access_token").asText(null);

                if (token == null || token.isBlank()) {
                    logger.error("Access token missing in response");
                }
            } else {
                logger.error("Auth token API failed with status: {}", response.getStatusCode());
            }
        } catch (Exception e) {
            logger.error("Error while fetching auth token", e);
        }
    }

    // ────────────── 2. Main Entry Point ──────────────
    public List<MergedEntity> getMergedEntities() {
        fetchAuthToken();
        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        logger.info("Finance results count: {}", financeResults.size());

        return StreamSupport.stream(financeResults.spliterator(), false)
                .map(r -> r.path("entity"))
                .filter(e -> e.has("identifiers") && e.path("identifiers").has("ptyId"))
                .map(this::mergeForSinglePtyId)
                .collect(Collectors.toList());
    }

    // ────────────── 3. Merge One Entry ──────────────
    private MergedEntity mergeForSinglePtyId(JsonNode financeEntity) {

        // Log and extract identifiers node
        JsonNode identifiersNode = financeEntity.path("identifiers");
        logger.info("Identifiers JSON:\n{}", identifiersNode.toPrettyString());

        Identifiers identifiers = mapper.convertValue(identifiersNode, Identifiers.class);
        logger.info("Mapped kycId: {}", identifiers.getKycId());

        BusinessAddress businessAddress = mapper.convertValue(financeEntity.path("businessAddress"), BusinessAddress.class);

        RegistrationAddress registrationAddress = financeEntity.has("registrationAddress")
                ? mapper.convertValue(financeEntity.path("registrationAddress"), RegistrationAddress.class)
                : null;

        String ptyId = identifiers.getPtyId();

        List<KycSites> kycSites = null;
        String kycSegment = null;
        List<RiskIndustry> riskIndustry = null;

        if (ptyId != null && token != null && !token.isBlank()) {
            JsonNode kycRoot = fetchJson(kycUrl + "?ptyId=" + ptyId);
            JsonNode kycData = kycRoot.path("results").isArray() && kycRoot.path("results").size() > 0
                    ? kycRoot.path("results").get(0).path("kycData")
                    : null;

            if (kycData != null && !kycData.isMissingNode()) {
                if (kycData.has("kycSites") && kycData.path("kycSites").isArray()) {
                    kycSites = mapper.convertValue(kycData.path("kycSites"), new TypeReference<>() {});
                }
                if (kycData.has("kycSegment")) {
                    kycSegment = kycData.path("kycSegment").asText(null);
                }
                if (kycData.has("riskIndustry") && kycData.path("riskIndustry").isArray()) {
                    riskIndustry = mapper.convertValue(kycData.path("riskIndustry"), new TypeReference<>() {});
                }
            } else {
                logger.info("No KYC data found for ptyId {}", ptyId);
            }
        } else {
            logger.warn("Skipping KYC fetch for ptyId {} (token or id missing)", ptyId);
        }

        return new MergedEntity(
                List.of(identifiers),
                businessAddress,
                registrationAddress,
                kycSites,
                kycSegment,
                riskIndustry
        );
    }

    // ────────────── 4. Fetch JSON from URL ──────────────
    private JsonNode fetchJson(String url) {
        try {
            HttpHeaders headers = new HttpHeaders();
            if (token != null && !token.isBlank()) {
                headers.setBearerAuth(token);
            }
            headers.add("Accept", "*/*;version=gamma");

            ResponseEntity<String> response = restTemplate.exchange(
                    url, HttpMethod.GET, new HttpEntity<>(headers), String.class
            );

            if (!response.getStatusCode().is2xxSuccessful()) {
                logger.error("GET {} failed: {}", url, response.getStatusCode());
                return mapper.createObjectNode();
            }

            return mapper.readTree(response.getBody());

        } catch (Exception e) {
            logger.error("Error fetching JSON from {}", url, e);
            return mapper.createObjectNode();
        }
    }
}
