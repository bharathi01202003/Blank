package org.example.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class DataService {

    @Autowired
    private WebClient.Builder webClientBuilder;

    @Value("${api.auth.dynamic-auth}")
    private String dynamicAuth;

    private final String authUrl = "https://api-int.staging.echonet/oauth2/v1/token?grant_type=client_credentials";
    private final String financeUrl = "https://api-int.staging.echonet/ce-third-parties/v2/batch-export?type=FinanceCH";
    private final String kycUrl = "https://api-int.staging.echonet/ce-third-parties/v2/entities/kyc?kycId=255472";

    public List<MergedEntity> fetchAndMergeData() {
        List<MergedEntity> mergedList = new ArrayList<>();

        try {
            System.out.println("Calling AUTH URL: " + authUrl);
            System.out.println("Using dynamic Basic auth: " + dynamicAuth);

            String token = fetchAuthToken();
            if (token == null || token.isEmpty()) {
                System.err.println("Token is null or empty");
                return mergedList;
            }

            System.out.println("Access token received: " + token);

            File1Root financeRoot = fetchFinanceData(token);
            File2Root kycRoot = fetchKycData(token);

            if (financeRoot == null || kycRoot == null
                    || financeRoot.getResults() == null || kycRoot.getResults() == null) {
                System.err.println("Either finance or kyc data is null");
                return mergedList;
            }

            mergedList = financeRoot.getResults().stream()
                    .map(File1Result::getEntity)
                    .filter(financeEntity -> financeEntity.getIdentifiers() != null && financeEntity.getIdentifiers().getKycId() != null)
                    .flatMap(financeEntity -> {
                        Integer kycId = financeEntity.getIdentifiers().getKycId();
                        return kycRoot.getResults().stream()
                                .filter(kycResult -> kycResult.getIdentifiers().stream().anyMatch(id -> id.getKycId().equals(kycId)))
                                .map(matchedKyc -> {
                                    KycData kycData = matchedKyc.getKycData();
                                    return new MergedEntity(
                                            Collections.singletonList(financeEntity.getIdentifiers()),
                                            financeEntity.getBusinessAddress(),
                                            kycData.getKycSites(),
                                            kycData.getKycSegment(),
                                            kycData.getRiskIndustry()
                                    );
                                });
                    })
                    .collect(Collectors.toList());

        } catch (Exception e) {
            System.err.println("Error during fetch and merge: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedList;
    }

    private String fetchAuthToken() {
        try {
            String response = webClientBuilder.build()
                    .post()
                    .uri(authUrl)
                    .header(HttpHeaders.ACCEPT, "*/*;version=gamma")
                    .header(HttpHeaders.AUTHORIZATION, dynamicAuth)
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            JsonNode json = new ObjectMapper().readTree(response);
            return json.has("access_token") ? json.get("access_token").asText() : null;
        } catch (Exception e) {
            System.err.println("Error fetching token: " + e.getMessage());
            return null;
        }
    }

    private File1Root fetchFinanceData(String token) {
        try {
            return webClientBuilder.build()
                    .get()
                    .uri(financeUrl)
                    .header(HttpHeaders.ACCEPT, "*/*;version=gamma")
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                    .retrieve()
                    .bodyToMono(File1Root.class)
                    .block();
        } catch (Exception e) {
            System.err.println("Error fetching Finance data: " + e.getMessage());
            return null;
        }
    }

    private File2Root fetchKycData(String token) {
        try {
            return webClientBuilder.build()
                    .get()
                    .uri(kycUrl)
                    .header(HttpHeaders.ACCEPT, "*/*;version=gamma")
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                    .retrieve()
                    .bodyToMono(File2Root.class)
                    .block();
        } catch (Exception e) {
            System.err.println("Error fetching KYC data: " + e.getMessage());
            return null;
        }
    }
}
