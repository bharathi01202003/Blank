package com.bnp.service;

import com.bnp.model.MergedEntity;
import com.bnp.model.MergedEntityRecord;
import com.bnp.model.*;
import com.bnp.repository.MergedEntityRecordRepository;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private static final Logger logger = LoggerFactory.getLogger(DataService.class);

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;
    private final MergedEntityRecordRepository mergedEntityRecordRepository;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate, 
                      MergedEntityRecordRepository mergedEntityRecordRepository) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
        this.mergedEntityRecordRepository = mergedEntityRecordRepository;
    }

    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            ResponseEntity<String> response =
                    restTemplate.postForEntity(authTokenUrl, new HttpEntity<>("", headers), String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                logger.error("Auth API response: {}", response.getStatusCode());
                token = null;
                return;
            }

            token = mapper.readTree(response.getBody()).path("access_token").asText(null);
            if (token == null || token.isBlank()) {
                logger.error("access_token missing in auth response");
            }
        } catch (Exception ex) {
            logger.error("Error fetching auth token", ex);
            token = null;
        }
    }

    @Transactional
    public void saveMergedEntitiesToDatabase() {
        fetchAuthToken();
        JsonNode financeResults = fetchJson(financeChUrl).path("results");
        logger.info("Finance results count: {}", financeResults.size());

        List<MergedEntityRecord> dbEntities = StreamSupport.stream(financeResults.spliterator(), false)
                .map(r -> r.path("entity"))
                .filter(e -> e.has("identifiers") && e.path("identifiers").has("ptyId"))
                .map(this::mergeForSinglePtyId)
                .filter(entity -> entity.getKycSites() != null && !entity.getKycSites().isEmpty())
                .map(this::convertToDbEntity)
                .collect(Collectors.toList());

        // Clear existing data before saving new batch
        mergedEntityRecordRepository.deleteAll();
        mergedEntityRecordRepository.saveAll(dbEntities);
        logger.info("Saved {} entities to database", dbEntities.size());
    }

    private MergedEntityRecord convertToDbEntity(MergedEntity mergedEntity) {
        Identifiers id = mergedEntity.getIdentifiers().get(0);
        String crdsCode = safe(id.getCrdsCode());

        RegistrationAddress reg = mergedEntity.getRegistrationAddress();
        String regAddress = (reg != null) ? 
            Stream.of(reg.getLine1(), reg.getLine2(), reg.getCity(), reg.getState(), reg.getZipCode())
                .filter(s -> s != null && !s.isBlank())
                .map(this::safe)
                .collect(Collectors.joining(" "))
                : "";

        String regCountry = reg != null ? safe(reg.getCountry()) : "";

        KycSites site = mergedEntity.getKycSites().isEmpty() ? null : mergedEntity.getKycSites().get(0);

        return new MergedEntityRecord(
            crdsCode,
            regAddress,
            regCountry,
            site != null ? safe(site.getSiteName()) : "",
            site != null ? safe(site.getSiteCountry()) : "",
            site != null ? safe(site.getSiteStatus()) : "",
            safe(mergedEntity.getKycSegment()),
            mergedEntity.getRiskIndustry().stream()
                .map(ri -> safe(ri.getRiskIndustryCode()) + "-" + safe(ri.getRiskIndustryDescription()))
                .collect(Collectors.joining(","))
        );
    }

    private MergedEntity mergeForSinglePtyId(JsonNode financeEntity) {
        Identifiers identifiers = mapper.convertValue(financeEntity.path("identifiers"), Identifiers.class);
        BusinessAddress businessAddress = mapper.convertValue(financeEntity.path("businessAddress"), BusinessAddress.class);
        RegistrationAddress registrationAddress = financeEntity.has("registrationAddress")
                ? mapper.convertValue(financeEntity.path("registrationAddress"), RegistrationAddress.class)
                : null;

        String ptyId = identifiers.getPtyId();

        List<KycSites> kycSites = null;
        String kycSegment = null;
        List<RiskIndustry> riskIndustry = null;

        if (ptyId != null && token != null && !token.isBlank()) {
            JsonNode kycRoot = fetchJson(kycUrl + "?ptyId=" + ptyId);
            JsonNode kycData = kycRoot.path("results").isArray() && kycRoot.path("results").size() > 0
                    ? kycRoot.path("results").get(0).path("kycData")
                    : mapper.createObjectNode();

            if (!kycData.isMissingNode()) {
                if (kycData.path("kycSites").isArray()) {
                    kycSites = mapper.convertValue(kycData.path("kycSites"), new TypeReference<>() {});
                }
                kycSegment = kycData.has("kycSegment") ? kycData.path("kycSegment").asText(null) : null;
                if (kycData.path("riskIndustry").isArray()) {
                    riskIndustry = mapper.convertValue(kycData.path("riskIndustry"), new TypeReference<>() {});
                }
            } else {
                logger.info("No KYC data found for ptyId {}", ptyId);
            }
        }

        return new MergedEntity(
                List.of(identifiers),
                businessAddress,
                registrationAddress,
                kycSites,
                kycSegment,
                riskIndustry
        );
    }

    private JsonNode fetchJson(String url) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.add("Accept", "*/*;version=gamma");
            if (token != null && !token.isBlank()) {
                headers.setBearerAuth(token);
            }

            ResponseEntity<String> response = restTemplate.exchange(
                url, 
                HttpMethod.GET, 
                new HttpEntity<>(headers), 
                String.class
            );

            if (!response.getStatusCode().is2xxSuccessful()) {
                logger.error("GET {} returned {}", url, response.getStatusCode());
                return mapper.createObjectNode();
            }
            return mapper.readTree(response.getBody());
        } catch (Exception e) {
            logger.error("Exception while fetching {}", url, e);
            return mapper.createObjectNode();
        }
    }

    private String safe(String v) {
        return v == null ? "" : v.trim().replace(";", " ");
    }
}
