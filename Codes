package org.example.service;

import org.example.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
public class DataService {

    private static final Logger logger = LoggerFactory.getLogger(DataService.class);
    private final WebClient webClient;

    @Value("${api.auth.url}")
    private String authUrl;

    @Value("${api.auth.client-id}")
    private String clientId;

    @Value("${api.finance.url}")
    private String financeUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    public DataService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.build();
    }

    public List<MergedEntity> fetchMergedData() {
        String authToken = fetchAuthToken();

        if (authToken == null) {
            logger.error("‚ö†Ô∏è Could not fetch auth token. Skipping data fetch.");
            return Collections.emptyList();
        }

        File1Root financeData = fetch(financeUrl, File1Root.class, authToken);
        File2Root kycData = fetch(kycUrl, File2Root.class, authToken);

        if (financeData != null && kycData != null) {
            return mergeData(financeData, kycData);
        } else {
            logger.warn("‚ùó One or both data sources are null. Returning empty list.");
            return Collections.emptyList();
        }
    }

    private String fetchAuthToken() {
        try {
            logger.info("üîê Requesting auth token from {}", authUrl);

            Map<String, Object> response = webClient.post()
                    .uri(authUrl)
                    .header("Accept", "*/*;version=gamma")
                    .contentType(MediaType.APPLICATION_FORM_URLENCODED)
                    .bodyValue("client_id=" + clientId + "&grant_type=client_credentials")
                    .retrieve()
                    .bodyToMono(Map.class)
                    .block();

            if (response != null && response.containsKey("access_token")) {
                String token = (String) response.get("access_token");
                logger.info("‚úÖ Auth token retrieved");
                return token;
            } else {
                logger.error("‚ùå Auth token not found in response: {}", response);
            }

        } catch (WebClientResponseException e) {
            logger.error("‚ùå Auth token request failed: {} - {}", e.getStatusCode(), e.getResponseBodyAsString());
        } catch (Exception e) {
            logger.error("‚ùå Auth token fetch error: {}", e.getMessage());
        }

        return null;
    }

    private <T> T fetch(String url, Class<T> clazz, String token) {
        try {
            logger.info("üåê Fetching data from: {}", url);

            T result = webClient.get()
                    .uri(url)
                    .header("Authorization", "Bearer " + token)
                    .header("Accept", "*/*;version=gamma")
                    .retrieve()
                    .bodyToMono(clazz)
                    .block();

            logger.info("‚úÖ Received response from {}", url);
            return result;

        } catch (WebClientResponseException e) {
            logger.error("‚ùå API error at {}: {} - {}", url, e.getStatusCode(), e.getResponseBodyAsString());
        } catch (Exception e) {
            logger.error("‚ùå Failed to fetch from {}: {}", url, e.getMessage());
        }

        return null;
    }

    private List<MergedEntity> mergeData(File1Root financeData, File2Root kycData) {
        List<MergedEntity> merged = new ArrayList<>();

        for (File1Result financeResult : financeData.getResults()) {
            if (financeResult.getEntity() == null || financeResult.getEntity().getIdentifiers() == null) {
                continue;
            }

            Identifiers financeId = financeResult.getEntity().getIdentifiers();

            Optional<File2Result> match = kycData.getResults().stream()
                    .filter(kyc -> kyc.getIdentifiers() != null && !kyc.getIdentifiers().isEmpty()
                            && financeId.getPtyId().equals(kyc.getIdentifiers().get(0).getPtyId()))
                    .findFirst();

            match.ifPresent(kyc -> {
                MergedEntity mergedEntity = new MergedEntity();
                mergedEntity.setIdentifiers(Collections.singletonList(financeId));
                mergedEntity.setBusinessAddress(financeResult.getEntity().getBusinessAddress());

                KycData kycDataObj = kyc.getKycData();
                if (kycDataObj != null) {
                    mergedEntity.setKycSites(kycDataObj.getKycSites());
                    mergedEntity.setKycSegment(kycDataObj.getKycSegment());
                    mergedEntity.setRiskIndustry(kycDataObj.getRiskIndustry());
                }

                merged.add(mergedEntity);
            });
        }

        logger.info("‚úÖ Merged {} entities from finance and KYC data", merged.size());
        return merged;
    }
}
