package org.example.service;

import org.example.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class KycMergeService {

    private final RestTemplate restTemplate;
    
    private static final String FINANCE_API_URL = "https://api.example.com/finance-data";
    private static final String KYC_API_URL = "https://api.example.com/kyc-data";

    @Autowired
    public KycMergeService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public List<MergedEntity> getMergedEntities(String authToken) {
        try {
            // Fetch finance data with access token
            File1Root financeData = fetchApiData(FINANCE_API_URL, authToken, File1Root.class);
            if (financeData == null || financeData.getResults() == null) {
                return Collections.emptyList();
            }

            // Fetch KYC data with same access token
            File2Root kycData = fetchApiData(KYC_API_URL, authToken, File2Root.class);
            if (kycData == null || kycData.getResults() == null) {
                return Collections.emptyList();
            }

            // Merge the data
            return mergeData(financeData.getResults(), kycData.getResults());
            
        } catch (RestClientException e) {
            System.err.println("API request failed: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    private <T> T fetchApiData(String url, String authToken, Class<T> responseType) 
        throws RestClientException {
        
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", authToken);
        headers.setAccept(List.of(MediaType.APPLICATION_JSON));
        
        HttpEntity<String> entity = new HttpEntity<>(headers);
        
        ResponseEntity<T> response = restTemplate.exchange(
            url, HttpMethod.GET, entity, responseType);
            
        return response.getBody();
    }

    private List<MergedEntity> mergeData(List<File1Result> financeResults, List<File2Result> kycResults) {
        List<MergedEntity> mergedList = new ArrayList<>();

        for (File1Result finance : financeResults) {
            if (finance == null || finance.getEntity() == null || 
                finance.getEntity().getIdentifiers() == null) {
                continue;
            }

            kycResults.stream()
                .filter(kyc -> kyc != null && 
                       kyc.getIdentifiers() != null && 
                       !kyc.getIdentifiers().isEmpty())
                .filter(kyc -> finance.getEntity().getIdentifiers().getPtyId()
                    .equals(kyc.getIdentifiers().get(0).getPtyId()))
                .findFirst()
                .ifPresent(kyc -> {
                    MergedEntity merged = new MergedEntity();
                    // Set finance data
                    merged.setIdentifiers(finance.getEntity().getIdentifiers());
                    merged.setBusinessAddress(finance.getEntity().getBusinessAddress());
                    
                    // Set KYC data if available
                    if (kyc.getKycData() != null) {
                        merged.setKyCsites(kyc.getKycData().getKyCsites());
                        merged.setKyCsegment(kyc.getKycData().getKyCsegment());
                        merged.setRiskIndustry(kyc.getKycData().getRiskIndustry());
                    }
                    
                    mergedList.add(merged);
                });
        }

        return mergedList;
    }
}
