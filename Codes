import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class DataService {

    @Value("${finance.api.url}")
    private String financeApiUrl;

    @Value("${kyc.api.url}")
    private String kycApiUrl;

    private final RestTemplate restTemplate;

    public ResultObject fetchCombinedData(String accessToken) {
        // 1. Fetch and validate API responses
        FinanceResponse financeResponse = restTemplate.getForObject(
            financeApiUrl,
            FinanceResponse.class
        );

        KycResponse kycResponse = restTemplate.getForObject(
            kycApiUrl,
            KycResponse.class
        );

        if (financeResponse == null || kycResponse == null || kycResponse.getResults() == null) {
            throw new RuntimeException("Failed to retrieve API responses");
        }

        // 2. Assuming we want to process the first KycEntity in the results
        KycEntity kycEntity = kycResponse.getResults().get(0); // Adjust as needed

        // 3. Map the common identifier (assuming kycid is the common field)
        String commonIdentifier = financeResponse.getEntity().getIdentifiers().getKycid();

        // 4. Filter KYC segments
        List<KycSegment> filteredSegments = kycEntity.getKycData().getKycSegments()
            .stream()
            .filter(segment -> segment.getId().equals(commonIdentifier))
            .collect(Collectors.toList());

        // 5. Build the result object
        return ResultObject.builder()
            .identifier(financeResponse.getEntity().getIdentifiers())
            .businessAddress(financeResponse.getEntity().getBusinessAddress())
            .kycData(KycData.builder()
                .kycSegments(filteredSegments)
                .kycSites(kycEntity.getKycData().getKycSites())
                .riskIndustries(kycEntity.getKycData().getRiskIndustries())
                .build())
            .build();
    }
}
